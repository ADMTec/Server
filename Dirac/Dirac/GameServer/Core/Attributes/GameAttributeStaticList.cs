using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Dirac.GameServer.Core
{
    public static class GameAttributeStaticList
    {
        public static readonly List<Attribute> AttributesByID = new List<Attribute>();
        public static readonly Dictionary<String, int> AttributesIDsbyName = new Dictionary<String, int>();

        public static void Initialize()
        {
            AttributesByID.Add( new AttributeF(0, 0, -1, 0, 0, "", "", "Axe_Bad_Data", AttributeEncoding.Float32, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(1, 0, 5, 0, 1, "", "", "Attribute_Timer", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(2, 0, -1, 0, 1, "", "", "Attribute_Pool", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(3, 0, -1, 0, 1, "", "", "Death_Count", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(4, 0, -1, 0, 1, "", "", "DualWield_Hand", AttributeEncoding.IntMinMax, 1, 0, 2, 2));
            AttributesByID.Add( new AttributeI(5, 0, -1, 0, 1, "", "", "DualWield_Hand_Next", AttributeEncoding.IntMinMax, 1, 0, 2, 2));
            AttributesByID.Add( new AttributeB(6, 0, -1, 0, 1, "", "", "DualWield_Hands_Swapped", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeI(7, 0, -1, 0, 1, "", "", "Respawn_Game_Time", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(8, 0, -1, 0, 1, "", "", "Backpack_Slots", AttributeEncoding.IntMinMax, 1, 0, 128, 8));
            AttributesByID.Add( new AttributeI(9, 0, -1, 0, 1, "", "", "Shared_Stash_Slots", AttributeEncoding.IntMinMax, 1, 0, 210, 8));
            AttributesByID.Add( new AttributeF(10, 0, -1, 0, 0, "", "", "Strength", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(11, 0, -1, 0, 0, "", "", "Dexterity", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(12, 0, -1, 0, 0, "", "", "Intelligence", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(13, 0, -1, 0, 0, "", "", "Vitality", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(14, 0, -1, 0, 0, "", "((Strength + Stats_All_Bonus + Strength_Requeriment + (Strength_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Strength_Requeriment_Percent)) * (1 - Strength_Reduction_Percent)", "Strength_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(15, 0, -1, 0, 0, "", "((Dexterity + Stats_All_Bonus + Dexterity_Requeriment + (Dexterity_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Dexterity_Requeriment_Percent)) * (1 - Dexterity_Reduction_Percent)", "Dexterity_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(16, 0, -1, 0, 0, "", "((Intelligence + Stats_All_Bonus + Intelligence_Requeriment + (Intelligence_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Intelligence_Requeriment_Percent)) * (1 - Intelligence_Reduction_Percent)", "Intelligence_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(17, 0, -1, 0, 0, "", "((Vitality + Stats_All_Bonus + Vitality_Requeriment + (Vitality_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Vitality_Requeriment_Percent)) * (1 - Vitality_Reduction_Percent)", "Vitality_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(18, 0, -1, 0, 0, "", "", "Strength_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(19, 0, -1, 0, 0, "", "", "Dexterity_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(20, 0, -1, 0, 0, "", "", "Intelligence_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(21, 0, -1, 0, 0, "", "", "Vitality_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(22, 0, -1, 0, 0, "", "", "Strength_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(23, 0, -1, 0, 0, "", "", "Dexterity_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(24, 0, -1, 0, 0, "", "", "Intelligence_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(25, 0, -1, 0, 0, "", "", "Vitality_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(26, 0, -1, 1, 0, "", "", "Strength_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(27, 0, -1, 1, 0, "", "", "Dexterity_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(28, 0, -1, 1, 0, "", "", "Intelligence_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(29, 0, -1, 1, 0, "", "", "Vitality_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(30, -1, -1, 3, 1, "", "", "Primary_Damage_Attribute", AttributeEncoding.IntMinMax, 31, -1, 3, 3));
            AttributesByID.Add( new AttributeF(31, 0, -1, 0, 0, "", "", "Attack", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(32, 0, -1, 0, 0, "", "", "Precision", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(33, 0, -1, 0, 0, "", "", "Defense", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(34, 0, -1, 0, 0, "", "((Attack + Stats_All_Bonus + Attack_Bonus) * (1 + Attack_Bonus_Percent)) * (1 - Attack_Reduction_Percent)", "Attack_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(35, 0, -1, 0, 0, "", "((Precision + Stats_All_Bonus + Precision_Bonus) * (1 + Precision_Bonus_Percent)) * (1 - Precision_Reduction_Percent)", "Precision_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(36, 0, -1, 0, 0, "", "((Defense + Stats_All_Bonus + Defense_Bonus) * (1 + Defense_Bonus_Percent)) * (1 - Defense_Reduction_Percent)", "Defense_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(37, 0, -1, 0, 0, "", "", "Attack_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(38, 0, -1, 0, 0, "", "", "Precision_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(39, 0, -1, 0, 0, "", "", "Defense_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(40, 0, -1, 0, 0, "", "", "Attack_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(41, 0, -1, 0, 0, "", "", "Precision_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(42, 0, -1, 0, 0, "", "", "Defense_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(43, 0, -1, 1, 0, "", "", "Attack_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(44, 0, -1, 1, 0, "", "", "Precision_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(45, 0, -1, 1, 0, "", "", "Defense_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(46, 0, -1, 0, 0, "", "", "Armor", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(47, 0, -1, 0, 0, "", "", "Armor_Bonus_Percent", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(48, 0, -1, 0, 0, "", "0", "Armor_Item", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(49, 0, -1, 0, 0, "", "", "Armor_Bonus_Item", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(50, 0, -1, 0, 0, "", "0", "Armor_Item_Percent", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(51, 0, -1, 0, 0, "FLOOR((Armor_Item + Armor_Bonus_Item) * (Armor_Item_Percent + 1))", "", "Armor_Item_SubTotal", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(52, 0, -1, 0, 0, "(Armor_Item > 0)?(Max(Armor_Item_SubTotal, 1)):Armor_Item_SubTotal", "", "Armor_Item_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(53, 0, -1, 0, 0, "", "FLOOR((Armor + Armor_Item_Total + Strength_Total) * (Armor_Bonus_Percent + 1))", "Armor_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(54, 0, -1, 0, 1, "", "", "Experience_Granted", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(55, 0, -1, 0, 1, "", "", "Experience_Next", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(56, 0, -1, 0, 1, "", "", "Gold_Granted", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(57, 0, -1, 0, 1, "", "", "Gold", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(58, 0, -1, 0, 0, "", "", "Gold_Find", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(59, 0, -1, 0, 1, "", "", "Level", AttributeEncoding.IntMinMax, 31, -1, 127, 8));
            AttributesByID.Add( new AttributeI(60, 0, -1, 0, 1, "", "", "Level_Requeriment", AttributeEncoding.IntMinMax, 1, -1, 127, 8));
            AttributesByID.Add( new AttributeF(61, 0, -1, 0, 0, "", "", "Magic_Find", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeB(62, 0, -1, 1, 1, "", "", "Magic_And_Gold_Find_Suppressed", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(63, 0, 14, 0, 0, "", "", "Treasure_Find", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(64, 0, 10, 0, 1, "", "", "Resource_Cost_Reduction_Amount", AttributeEncoding.IntMinMax, 9, -4095, 16383, 15));
            AttributesByID.Add( new AttributeF(65, 0, 10, 0, 0, "", "Resource_Cost_Reduction_Amount", "Resource_Cost_Reduction_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(66, 0, 10, 0, 0, "", "", "Resource_Set_Point_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(67, 0, -1, 0, 0, "", "", "Faster_Healing_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(68, 0, 10, 0, 0, "", "", "Spending_Resource_Heals_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(69, 0, -1, 0, 0, "", "", "Bonus_Healing_Received_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(70, 0, -1, 0, 0, "", "", "Reduced_Healing_Received_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(71, 0, -1, 0, 0, "", "", "Experience_Bonus", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(72, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(73, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(74, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Mult_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(75, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Health", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(76, 0, -1, 0, 0, "", "", "Increased_Health_From_Globes_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(77, 0, -1, 0, 0, "", "Increased_Health_From_Globes_Percent", "Increased_Health_From_Globes_Percent_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(78, 0, -1, 0, 0, "", "", "Bonus_Health_Percent_Per_Second_From_Globes", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(79, 0, -1, 0, 0, "", "Bonus_Health_Percent_Per_Second_From_Globes", "Bonus_Health_Percent_Per_Second_From_Globes_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(80, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(81, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(82, 0, 0, 0, 0, "", "", "Resistance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(83, 0, 0, 0, 0, "", "", "Resistance_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(84, 0, 0, 0, 0, "", "(Resistance + Resistance_All#NONE + Resistance_From_Intelligence#NONE) * ((Resistance_Percent_All#NONE + Resistance_Percent + 1))", "Resistance_Total", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(85, 0, -1, 0, 0, "", "", "Resistance_All", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(86, 0, -1, 0, 0, "", "", "Resistance_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(87, 0, -1, 0, 0, "", "(Intelligence_Total * 0.1)", "Resistance_From_Intelligence", AttributeEncoding.Float16, 1, 0, 0, 16));
            AttributesByID.Add( new AttributeF(88, 0, -1, 0, 0, "", "", "Class_Damage_Reduction_Percent", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeI(89, 0, 4, 0, 1, "", "", "Skill", AttributeEncoding.IntMinMax, 9, 0, 4095, 12));
            AttributesByID.Add( new AttributeI(90, 0, 4, 0, 1, "", "Skill", "Skill_Total", AttributeEncoding.IntMinMax, 9, 0, 4095, 12));
            AttributesByID.Add( new AttributeI(91, -1, -1, 1, 1, "", "", "TeamID", AttributeEncoding.IntMinMax, 31, -1, 23, 5));
            AttributesByID.Add( new AttributeI(92, -1, -1, 1, 1, "", "", "Team_Override", AttributeEncoding.IntMinMax, 31, -1, 23, 5));
            AttributesByID.Add( new AttributeB(93, 0, -1, 1, 1, "", "", "Invulnerable", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(94, 0, -1, 1, 1, "", "", "Loading", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(95, -1, -1, 3, 1, "", "", "Loading_Player_ACD", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(96, -1, -1, 3, 1, "", "", "Loading_Power_SNO", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(97, -1, -1, 3, 1, "", "", "Loading_Anim_Tag", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeB(98, 0, -1, 1, 1, "", "", "Loading_NewGame", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(99, 0, -1, 1, 1, "", "", "Auto_Porting_To_Save_Point", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(100, 0, -1, 1, 1, "", "", "No_Damage", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(101, 0, -1, 1, 1, "", "", "No_AutoPickup", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(102, 0, 0, 0, 0, "", "", "Light_Radius_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(103, 0, -1, 0, 0, "", "Min(Hitpoints_Cur.Agg, Hitpoints_Max_Total)", "Hitpoints_Cur", AttributeEncoding.Float32, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(104, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Level", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(105, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Vitality", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(106, 0, -1, 0, 0, "", "Vitality_Total * Hitpoints_Factor_Vitality", "Hitpoints_Total_From_Vitality", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(107, 0, -1, 0, 0, "", "(Level - 1) * Hitpoints_Factor_Level", "Hitpoints_Total_From_Level", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(108, 0, -1, 0, 0, "", "", "Hitpoints_Granted", AttributeEncoding.Float32, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(109, 0, -1, 0, 1, "", "", "Hitpoints_Granted_Duration", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeF(110, 0, -1, 0, 0, "", "", "Hitpoints_Max", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(111, 0, -1, 0, 0, "", "", "Hitpoints_Max_Bonus", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(112, 0, -1, 0, 0, "", "Max((Hitpoints_Max + Hitpoints_Total_From_Level + Hitpoints_Total_From_Vitality + Hitpoints_Max_Bonus) * (Hitpoints_Max_Percent_Bonus + Hitpoints_Max_Percent_Bonus_Item + 1), 1)", "Hitpoints_Max_Total", AttributeEncoding.Float32, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(113, 0, -1, 0, 0, "", "", "Hitpoints_Percent", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(114, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(115, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(116, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus_Item", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(117, 0, -1, 0, 0, "", "", "Hitpoints_Healed_Target", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeI(118, -1, -1, 3, 1, "", "", "Resource_Type_Primary", AttributeEncoding.IntMinMax, 1, -1, 7, 4));
            AttributesByID.Add( new AttributeI(119, -1, -1, 3, 1, "", "", "Resource_Type_Secondary", AttributeEncoding.IntMinMax, 1, -1, 7, 4));
            //Attributes.Add( new AttributeF(120, 0, 10, 0, 0, "", "Max(Mana_Cur.Agg, 0)", "Mana_Cur", AttributeEncoding.Float32, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(120, 0, 10, 0, 0, "", "Max(Mana_Cur.Agg, 0)", "Mana_Cur", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeF(121, 0, 10, 0, 0, "", "", "Mana_Max", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(122, 0, 10, 0, 0, "", "", "Mana_Max_Bonus", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(123, 0, 10, 0, 0, "", "Max((Mana_Max + ((Level#NONE - 1) * Resource_Factor_Level) + Mana_Max_Bonus) * (Mana_Max_Percent_Bonus + 1), 0)", "Mana_Max_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(124, 0, 10, 0, 0, "", "", "Resource_Factor_Level", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(125, 0, 10, 0, 0, "", "", "Resource_Granted", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(126, 0, 10, 0, 1, "", "", "Resource_Granted_Duration", AttributeEncoding.IntMinMax, 9, 0, 16777215, 24));
            AttributesByID.Add( new AttributeF(127, 0, 10, 0, 0, "", "", "Resource_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(128, 0, 10, 0, 0, "", "", "Resource_Regen_Per_Second", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(129, 0, 10, 0, 0, "", "", "Resource_Regen_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(130, 0, 10, 0, 0, "", "Resource_Regen_Per_Second * (1 + Resource_Regen_Bonus_Percent) + (Resource_Regen_Percent_Per_Second * Mana_Max_Total)", "Resource_Regen_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(131, 0, 10, 0, 0, "", "Resource_Percent", "Mana_Max_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(132, 0, 10, 0, 0, "", "", "Resource_Capacity_Used", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(133, 0, 10, 0, 0, "", "Mana_Max_Total - Resource_Capacity_Used", "Resource_Effective_Max", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(134, 0, 10, 0, 0, "", "", "Resource_Regen_Percent_Per_Second", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(135, 0, 10, 0, 0, "", "", "Resource_Degeneration_Stop_Point", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(136, 0, -1, 0, 0, "", "", "Movement_Scalar", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(137, 0, -1, 0, 0, "", "", "Walking_Rate", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(138, 0, -1, 0, 0, "", "", "Running_Rate", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(139, 0, -1, 0, 0, "", "", "Sprinting_Rate", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(140, 0, -1, 0, 0, "", "", "Strafing_Rate", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(141, 0, -1, 0, 0, "", "Walking_Rate * Movement_Scalar_Total", "Walking_Rate_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(142, 0, -1, 0, 0, "", "Running_Rate * Movement_Scalar_Total", "Running_Rate_Total", AttributeEncoding.Float16, 41, 0, 0, 16));
            AttributesByID.Add( new AttributeF(143, 0, -1, 0, 0, "", "", "Last_Running_Rate", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(144, 0, -1, 0, 0, "", "Sprinting_Rate * Movement_Scalar_Total", "Sprinting_Rate_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(145, 0, -1, 0, 0, "", "Strafing_Rate * Movement_Scalar_Total", "Strafing_Rate_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(146, 0, -1, -1, 0, "0", "Movement_Bonus_Run_Speed", "Movement_Bonus_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(147, 0, -1, 0, 0, "0", "Max(0.1, Movement_Scalar) * (1 + Movement_Bonus_Total) * (1 - Movement_Scalar_Reduction_Percent * (1 - Min(1, Movement_Scalar_Reduction_Resistance)))", "Movement_Scalar_Subtotal", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(148, 0, -1, 0, 0, "0", "Min(1.25, Movement_Scalar_Subtotal)", "Movement_Scalar_Capped_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(149, 0, -1, 0, 0, "", "", "Movement_Scalar_Uncapped_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(150, 0, -1, 0, 0, "0", "Movement_Scalar_Capped_Total + Movement_Scalar_Uncapped_Bonus", "Movement_Scalar_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(151, 0, -1, 1, 0, "", "", "Movement_Bonus_Run_Speed", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(152, 0, -1, 0, 0, "", "", "Speed", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(153, 0, -1, 0, 0, "", "", "Casting_Speed_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(154, 0, -1, 0, 0, "", "(Casting_Speed + Casting_Speed_Bonus) * Max(0.1, 1 + Casting_Speed_Percent)", "Casting_Speed_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeB(155, 0, -1, 1, 1, "", "", "Always_Hits", AttributeEncoding.IntMinMax, 3, 0, 1, 1));
            AttributesByID.Add( new AttributeF(156, 0, -1, 0, 0, "", "", "Hit_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(157, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(158, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(159, 0, -1, 0, 0, "Attacks_Per_Second_Item * (1 + Attacks_Per_Second_Item_Percent)", "0", "Attacks_Per_Second_Item_Subtotal", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(160, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Item_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(161, 0, -1, 0, 0, "(Attacks_Per_Second_Item_Subtotal + Attacks_Per_Second_Item_Bonus)", "", "Attacks_Per_Second_Item_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(162, 0, -1, 0, 0, "0", "", "Attacks_Per_Second", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(163, 0, -1, 0, 0, "0", "", "Attacks_Per_Second_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(164, 0, -1, 0, 0, "0", "Max(0.01, (((Attacks_Per_Second_Item_CurrentHand > 0.0) ? Attacks_Per_Second_Item_CurrentHand : Attacks_Per_Second) + Attacks_Per_Second_Bonus + Attacks_Per_Second_Item_Bonus) * Max(0.1, (1 + Attacks_Per_Second_Percent)))", "Attacks_Per_Second_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(165, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(166, 0, -1, 0, 0, "0", "", "AI_Cooldown_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(167, 0, -1, 0, 0, "0", "", "Power_Cooldown_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(168, 0, 0, 0, 0, "", "", "Damage_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(169, 0, 0, 0, 0, "", "Max(Damage_Delta - Damage_Bonus_Min + Damage_Weapon_Delta_Total_CurrentHand, 0)", "Damage_Delta_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(170, 0, 0, 0, 0, "", "", "Damage_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(171, 0, 0, 0, 0, "", "", "Damage_Bonus_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(172, 0, 0, 0, 0, "", "Damage_Min_Subtotal + Damage_Type_Percent_Bonus * Damage_Min_Subtotal#Physical", "Damage_Min_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(173, 0, 0, 0, 0, "", "Damage_Min + Damage_Bonus_Min + Damage_Weapon_Min_Total_CurrentHand", "Damage_Min_Subtotal", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(174, 0, -1, 0, 0, "", "", "Damage_Percent_All_From_Skills", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(175, 0, 0, 0, 0, "", "", "Damage_Weapon_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(176, 0, 0, 0, 0, "(Damage_Weapon_Delta > 0.0) ? (Max(1, Damage_Weapon_Delta - Damage_Weapon_Bonus_Min)) : Damage_Weapon_Delta", "", "Damage_Weapon_Delta_SubTotal", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(177, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Delta)", "", "Damage_Weapon_Max", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(178, 0, 0, 0, 0, "(Damage_Weapon_Min_Total + Damage_Weapon_Delta_Total)", "", "Damage_Weapon_Max_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(179, 0, -1, 0, 0, "(Damage_Weapon_Max_Total#Physical + Damage_Weapon_Max_Total#Fire + Damage_Weapon_Max_Total#Cold + Damage_Weapon_Max_Total#Lightning + Damage_Weapon_Max_Total#Poison + Damage_Weapon_Max_Total#Arcane + Damage_Weapon_Max_Total#Holy)", "", "Damage_Weapon_Max_Total_All", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(180, 0, 0, 0, 0, "Max((Damage_Weapon_Delta_SubTotal + Damage_Weapon_Bonus_Delta) * (1 + Damage_Weapon_Percent_Total), 0)", "", "Damage_Weapon_Delta_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(181, 0, -1, 0, 0, "(Damage_Weapon_Delta_Total#Physical + Damage_Weapon_Delta_Total#Fire + Damage_Weapon_Delta_Total#Cold + Damage_Weapon_Delta_Total#Lightning + Damage_Weapon_Delta_Total#Poison + Damage_Weapon_Delta_Total#Arcane + Damage_Weapon_Delta_Total#Holy)", "", "Damage_Weapon_Delta_Total_All", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(182, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(183, 0, 0, 0, 0, "", "", "Damage_Weapon_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(184, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Bonus_Min) * (1 + Damage_Weapon_Percent_Total)", "", "Damage_Weapon_Min_Total", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(185, 0, -1, 0, 0, "(Damage_Weapon_Min_Total#Physical + Damage_Weapon_Min_Total#Fire + Damage_Weapon_Min_Total#Cold + Damage_Weapon_Min_Total#Lightning + Damage_Weapon_Min_Total#Poison + Damage_Weapon_Min_Total#Arcane + Damage_Weapon_Min_Total#Holy)", "", "Damage_Weapon_Min_Total_All", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(186, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(187, 0, 0, 0, 0, "", "", "Damage_Weapon_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(188, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(189, 0, 0, 0, 0, "Damage_Weapon_Percent_Bonus + Damage_Weapon_Percent_All#NONE", "", "Damage_Weapon_Percent_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(190, 0, 0, 0, 0, "", "", "Damage_Type_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(191, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Witchdoctor", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(192, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Wizard", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(193, 0, -1, 0, 0, "", "", "Crit_Percent_Base", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(194, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Capped", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(195, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Uncapped", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(196, 0, -1, 0, 0, "", "", "Crit_Percent_Cap", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(197, 0, -1, 0, 0, "", "", "Crit_Damage_Percent", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(198, 0, -1, 3, 1, "", "", "Crit_Effect_Time", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(199, 0, -1, 0, 0, "", "", "Pierce_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(200, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(201, 0, 0, 0, 0, "", "", "Damage_Reduction_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(202, 0, 0, 0, 0, "", "", "Damage_Reduction_Current", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(203, 0, 0, 3, 1, "", "", "Damage_Reduction_Last_Tick", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(204, 0, -1, 0, 0, "", "", "Block_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(205, 0, -1, 0, 0, "", "Block_Chance + Block_Chance_Item_Total", "Block_Chance_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(206, 0, -1, 0, 0, "", "", "Block_Chance_Bonus_Item", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(207, 0, -1, 0, 0, "", "0", "Block_Chance_Item", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(208, 0, -1, 0, 0, "Block_Chance_Item + Block_Chance_Bonus_Item", "", "Block_Chance_Item_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(209, 0, -1, 0, 0, "", "", "Block_Amount", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(210, 0, -1, 0, 0, "", "", "Block_Amount_Bonus_Percent", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(211, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(212, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Delta + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Max", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(213, 0, -1, 0, 0, "", "", "Block_Amount_Item_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(214, 0, -1, 0, 0, "", "", "Block_Amount_Item_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(215, 0, -1, 0, 0, "", "", "Block_Amount_Item_Bonus", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(216, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(217, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Melee", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(218, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Ranged", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(219, 0, -1, 0, 0, "", "", "Get_Hit_Current", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(220, 0, -1, 0, 0, "", "", "Get_Hit_Max_Base", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(221, 0, -1, 0, 0, "", "", "Get_Hit_Max_Per_Level", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(222, 0, -1, 0, 0, "", "Get_Hit_Max_Base + (Get_Hit_Max_Per_Level * Level)", "Get_Hit_Max", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(223, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Base", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(224, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Per_Level", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(225, 0, -1, 0, 0, "", "Get_Hit_Recovery_Base + (Get_Hit_Recovery_Per_Level * Level)", "Get_Hit_Recovery", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(226, 0, -1, 0, 0, "", "", "Get_Hit_Damage", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(227, 0, -1, 0, 0, "", "", "Get_Hit_Damage_Scalar", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeI(228, -1, -1, 3, 1, "", "", "Last_Damage_MainActor", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(229, -1, -1, 3, 1, "", "", "Last_ACD_Attacked", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeB(230, 0, -1, 1, 1, "", "", "Ignores_Critical_Hits", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(231, 0, 0, 1, 1, "", "", "Immunity", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(232, 0, -1, 1, 1, "", "", "Untargetable", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(233, 0, -1, 1, 1, "", "", "Immobolize", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeB(234, 0, -1, 1, 1, "", "", "Immune_To_Knockback", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(235, 0, -1, 1, 1, "", "", "Power_Immobilize", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeF(236, 0, -1, 0, 0, "", "", "Stun_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(237, 0, -1, 0, 0, "", "", "Stun_Length", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(238, 0, -1, 0, 0, "", "", "Stun_Recovery", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(239, 0, -1, 0, 0, "", "", "Stun_Recovery_Speed", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeB(240, 0, -1, 1, 1, "", "", "Stunned", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(241, 0, -1, 1, 1, "", "", "Stun_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(242, 0, -1, 0, 0, "", "", "Poison_Length_Reduction", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeB(243, 0, -1, 1, 1, "", "", "Poisoned", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(244, 0, -1, 1, 1, "", "", "Bleeding", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(245, 0, -1, 0, 0, "", "", "Bleed_Duration", AttributeEncoding.Float16, 1, 0, 0, 16));
            AttributesByID.Add( new AttributeB(246, 0, -1, 1, 1, "", "", "Chilled", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(247, 0, -1, 0, 0, "", "", "Freeze_Length_Reduction", AttributeEncoding.Float16, 1, 0, 0, 16));
            AttributesByID.Add( new AttributeB(248, 0, -1, 1, 1, "", "", "Freeze_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(249, 0, -1, 1, 1, "", "", "Webbed", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(250, 0, -1, 1, 1, "", "", "Slow", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(251, 0, -1, 1, 1, "", "", "FireAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(252, 0, -1, 1, 1, "", "", "LightningAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(253, 0, -1, 1, 1, "", "", "ColdAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(254, 0, -1, 1, 1, "", "", "PoisonAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(255, 0, -1, 1, 1, "", "", "Blind", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(256, 0, -1, 1, 1, "", "", "Enraged", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(257, 0, -1, 1, 1, "", "", "Slowdown_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(258, 0, -1, 1, 1, "", "", "Gethit_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(259, 0, -1, 0, 0, "", "", "Suffocation_Per_Second", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(260, 0, -1, 1, 0, "", "", "Suffocation_Unit_Value", AttributeEncoding.Float16Or32, 1, 0, 0, 0));
            AttributesByID.Add( new AttributeF(261, 0, 0, 0, 0, "", "", "Thorns_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(262, 0, -1, 0, 0, "", "", "Thorns_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(263, 0, 0, 0, 0, "", "Thorns_Percent + Thorns_Percent_All#NONE", "Thorns_Percent_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(264, 0, 0, 0, 0, "", "", "Thorns_Fixed", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(265, 0, -1, 0, 0, "", "", "Steal_Health_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(266, 0, -1, 0, 0, "", "", "Steal_Mana_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(267, 0, 10, 0, 0, "", "", "Resource_On_Hit", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(268, 0, 10, 0, 0, "", "", "Resource_On_Kill", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(269, 0, 10, 0, 0, "", "", "Resource_On_Crit", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(270, 0, -1, 0, 0, "", "", "Hitpoints_On_Hit", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(271, 0, -1, 0, 0, "", "", "Hitpoints_On_Kill", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(272, 0, -1, 0, 0, "", "", "Damage_To_Mana", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(273, 0, -1, 3, 1, "", "", "Last_Proc_Time", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(274, 0, 0, 0, 0, "", "", "Damage_Power_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(275, 0, 0, 0, 0, "", "", "Damage_Power_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(276, -1, -1, 3, 1, "", "", "Rope_Overlay", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(277, -1, -1, 3, 1, "", "", "General_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(278, -1, 4, 1, 1, "", "", "Power_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(279, -1, 4, 1, 1, "", "", "Power_Cooldown_Start", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(280, 0, -1, 1, 1, "", "", "Proc_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(281, 0, -1, 1, 1, "", "", "Emote_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeF(282, 0, -1, 0, 0, "", "", "Projectile_Speed", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(283, 0, -1, 0, 0, "", "", "Projectile_Speed_Increase_Percent", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(284, 0, -1, 1, 1, "", "", "Destroy When Path Blocked", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(285, 0, 4, 1, 1, "", "", "Skill_Toggled_State", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeI(286, -1, -1, 3, 1, "", "", "Act", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(287, -1, -1, 3, 1, "", "", "Difficulty", AttributeEncoding.IntMinMax, 9, -1, 4, 3));
            AttributesByID.Add( new AttributeF(288, -1, -1, 3, 0, "", "", "Last_Damage_Amount", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeB(289, 0, -1, 1, 1, "", "", "In_Knockback", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(290, 0, 0, 0, 0, "", "", "Amplify_Damage_Type_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(291, 0, -1, 0, 0, "", "", "Amplify_Damage_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(292, 0, -1, 0, 1, "", "", "Durability_Cur", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(293, 0, -1, 0, 1, "", "", "Durability_Max", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(294, 0, -1, 0, 1, "", "", "Durability_Last_Damage", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(295, -1, -1, 1, 1, "", "", "Item_Quality_Level", AttributeEncoding.IntMinMax, 8, -1, 11, 4));
            AttributesByID.Add( new AttributeF(296, 0, -1, 0, 0, "", "", "Item_Cost_Percent_Bonus", AttributeEncoding.Float16, 8, 0, 0, 16));
            AttributesByID.Add( new AttributeB(297, 0, -1, 1, 1, "", "", "Item_Equipped", AttributeEncoding.IntMinMax, 8, 0, 1, 1));
            AttributesByID.Add( new AttributeF(298, 0, 1, 1, 0, "FLOOR(Requirement.Agg * (1 + Requirements_Ease_Percent#NONE))", "", "Requirement", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(299, 0, -1, 0, 0, "", "0", "Requirements_Ease_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(300, 0, 1, 1, 0, "", "", "Requirement_When_Equipped", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(301, 0, -1, 0, 1, "", "0", "Sockets", AttributeEncoding.IntMinMax, 8, 0, 3, 2));
            AttributesByID.Add( new AttributeI(302, 0, -1, 0, 1, "", "0", "Sockets_Filled", AttributeEncoding.IntMinMax, 8, 0, 3, 2));
            AttributesByID.Add( new AttributeF(303, 0, -1, 0, 0, "", "", "Stats_All_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(304, -1, -1, 3, 1, "", "0", "Item_Bound_To_ACD", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(305, -1, -1, 3, 1, "", "0", "Item_Locked_To_ACD", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(306, 0, -1, 1, 1, "", "0", "Item_Binding_Level_Override", AttributeEncoding.IntMinMax, 8, 0, 5, 3));
            AttributesByID.Add( new AttributeI(307, 0, -1, 4, 1, "", "", "ItemStackQuantityHi", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(308, 0, -1, 4, 1, "", "", "ItemStackQuantityLo", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeF(309, 0, -1, 0, 0, "", "", "Run_Speed_Granted", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(310, 0, -1, 0, 1, "", "", "Run_Speed_Duration", AttributeEncoding.IntMinMax, 9, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(311, 0, -1, 0, 1, "", "", "IdentifyCost", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(312, 0, -1, 4, 1, "", "0", "Seed", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeB(313, 0, -1, 4, 1, "", "0", "IsCrafted", AttributeEncoding.IntMinMax, 8, 0, 1, 1));
            AttributesByID.Add( new AttributeI(314, 0, -1, 1, 1, "", "0", "DyeType", AttributeEncoding.IntMinMax, 8, -1, 30, 5));
            AttributesByID.Add( new AttributeI(315, -1, -1, 3, 1, "", "0", "EnchantAffix", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(316, 0, -1, 4, 1, "", "0", "EnchantRangeVal", AttributeEncoding.IntMinMax, 8, 0, 255, 8));
            AttributesByID.Add( new AttributeI(317, 0, -1, 1, 1, "", "0", "HighlySalvageable", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(318, 0, -1, 4, 1, "", "", "ItemUnlockTimeHi", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(319, 0, -1, 4, 1, "", "", "ItemUnlockTimeLo", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeB(320, 0, -1, 1, 1, "", "", "Always_Plays_GetHit", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(321, 0, -1, 1, 1, "", "", "Hidden", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(322, -1, -1, 1, 1, "", "", "RActor_Fade_Group", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(323, -1, -1, 3, 1, "", "", "Quest Range", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(324, 0, -1, 0, 1, "", "", "Attack_Cooldown_Min", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(325, 0, -1, 0, 1, "", "", "Attack_Cooldown_Delta", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(326, 0, -1, 0, 1, "", "InitialCooldownMin / Attacks_Per_Second_Total", "InitialCooldownMinTotal", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(327, 0, -1, 0, 1, "", "InitialCooldownDelta / Attacks_Per_Second_Total", "InitialCooldownDeltaTotal", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(328, 0, -1, 0, 1, "", "Attack_Cooldown_Min / Attacks_Per_Second_Total", "Attack_Cooldown_Min_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(329, 0, -1, 0, 1, "", "Attack_Cooldown_Delta / Attacks_Per_Second_Total", "Attack_Cooldown_Delta_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(330, 0, -1, 0, 1, "", "", "Closing_Cooldown_Min_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(331, 0, -1, 0, 1, "", "", "Closing_Cooldown_Delta_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeB(332, 0, -1, 0, 1, "", "", "Quest_Monster", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(333, -1, -1, 3, 1, "", "", "Quest_Monster Effect", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(334, -1, -1, 3, 1, "", "", "Treasure_Class", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(335, 0, -1, 1, 1, "", "", "Removes_Body_On_Death", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(336, 0, -1, 0, 1, "", "", "InitialCooldownMin", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(337, 0, -1, 0, 1, "", "", "InitialCooldownDelta", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeF(338, 0, -1, 0, 0, "", "", "Knockback_Weight", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeB(339, 0, -1, 1, 1, "", "", "UntargetableByPets", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(340, 0, -1, 0, 1, "", "", "Damage_State_Current", AttributeEncoding.IntMinMax, 31, 0, 15, 4));
            AttributesByID.Add( new AttributeI(341, 0, -1, 0, 1, "", "", "Damage_State_Max", AttributeEncoding.IntMinMax, 31, 0, 15, 4));
            AttributesByID.Add( new AttributeB(342, 0, -1, 1, 1, "", "", "Is_Player_Decoy", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(343, 0, 3, 0, 0, "", "", "Custom_Target_Weight", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(344, -1, -1, 3, 1, "", "", "Gizmo_State", AttributeEncoding.IntMinMax, 4, -1, 30, 5));
            AttributesByID.Add( new AttributeI(345, 0, -1, 1, 1, "", "", "Gizmo_Charges", AttributeEncoding.IntMinMax, 4, -1, 30, 5));
            AttributesByID.Add( new AttributeB(346, 0, 3, 0, 1, "", "", "Chest_Open", AttributeEncoding.IntMinMax, 4, 0, 1, 1));
            AttributesByID.Add( new AttributeB(347, 0, -1, 1, 1, "", "", "Door_Locked", AttributeEncoding.IntMinMax, 4, 0, 1, 1));
            AttributesByID.Add( new AttributeI(348, -1, -1, 3, 1, "", "", "Door_Timer", AttributeEncoding.Int, 4, 0, 0, 32));
            AttributesByID.Add( new AttributeB(349, 0, -1, 1, 1, "", "", "Gizmo_Disabled_By_Script", AttributeEncoding.IntMinMax, 4, 0, 1, 1));
            AttributesByID.Add( new AttributeI(350, -1, -1, 3, 1, "", "", "Gizmo_Operator_ACDID", AttributeEncoding.Int, 4, 0, 0, 32));
            AttributesByID.Add( new AttributeI(351, 0, -1, 0, 1, "", "", "Triggering_Count", AttributeEncoding.Int, 4, 0, 0, 32));
            AttributesByID.Add( new AttributeF(352, 0, -1, 0, 0, "", "", "Gate_Position", AttributeEncoding.Float16, 4, 0, 0, 16));
            AttributesByID.Add( new AttributeF(353, 0, -1, 0, 0, "", "", "Gate_Velocity", AttributeEncoding.Float16, 4, 0, 0, 16));
            AttributesByID.Add( new AttributeB(354, 0, -1, 1, 1, "", "", "Gizmo_Has_Been_Operated", AttributeEncoding.IntMinMax, 4, 0, 1, 1));
            AttributesByID.Add( new AttributeI(355, -1, -1, 3, 1, "", "", "Pet_Owner", AttributeEncoding.IntMinMax, 31, -1, 8, 4));
            AttributesByID.Add( new AttributeI(356, -1, -1, 3, 1, "", "", "Pet_Creator", AttributeEncoding.IntMinMax, 31, -1, 8, 4));
            AttributesByID.Add( new AttributeI(357, -1, -1, 3, 1, "", "", "Pet_Type", AttributeEncoding.IntMinMax, 31, -1, 24, 5));
            AttributesByID.Add( new AttributeB(358, 0, -1, 1, 1, "", "", "DropsNoLoot", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(359, 0, -1, 1, 1, "", "", "GrantsNoXP", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(360, 0, -1, 1, 1, "", "", "Hireling_Class", AttributeEncoding.IntMinMax, 31, 0, 4, 3));
            AttributesByID.Add( new AttributeI(361, -1, -1, 3, 1, "", "", "Summoned_By_SNO", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(362, 0, -1, 1, 1, "", "", "Is_NPC", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(363, 0, -1, 1, 1, "", "", "NPC_Is_Operatable", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(364, 0, -1, 1, 1, "", "", "NPC_Is_Escorting", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(365, 0, 12, 1, 1, "", "", "NPC_Has_Interact_Options", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(366, -1, 12, 3, 1, "", "", "Conversation_Icon", AttributeEncoding.IntMinMax, 31, -1, 6, 3));
            AttributesByID.Add( new AttributeI(367, -1, 16, 1, 1, "", "", "Callout_Cooldown", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(368, -1, 16, 1, 1, "", "", "Banter_Cooldown", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(369, 0, 16, 1, 1, "", "", "Conversation_Heard_Count", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(370, -1, -1, 3, 1, "", "", "Last_Tick_Shop_Entered", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(371, 0, -1, 1, 1, "", "", "Is_Helper", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(372, 0, -1, 0, 0, "", "", "Axe", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(373, 0, -1, 0, 0, "", "", "Axe2H", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(374, 0, -1, 0, 0, "", "", "ThrowingAxe", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(375, 0, -1, 0, 0, "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "AxeAny", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(376, 0, -1, 0, 0, "", "", "Bow", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(377, 0, -1, 0, 0, "", "", "Crossbow", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(378, 0, -1, 0, 0, "Pin(Bow + Crossbow, 0, 1)", "Pin(Bow + Crossbow, 0, 1)", "BowAny", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(379, 0, -1, 0, 0, "", "", "Club", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(380, 0, -1, 0, 0, "", "", "Club2H", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(381, 0, -1, 0, 0, "Pin(Club + Club2H, 0, 1)", "Pin(Club + Club2H, 0, 1)", "ClubAny", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(382, 0, -1, 0, 0, "", "", "Dagger", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(383, 0, -1, 0, 0, "", "", "Mace", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(384, 0, -1, 0, 0, "", "", "Mace2H", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(385, 0, -1, 0, 0, "Pin(Mace + Mace2H, 0, 1)", "Pin(Mace + Mace2H, 0, 1)", "MaceAny", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(386, 0, -1, 0, 0, "", "", "Sword", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(387, 0, -1, 0, 0, "", "", "Sword2H", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(388, 0, -1, 0, 0, "Pin(Sword + Sword2H, 0, 1)", "Pin(Sword + Sword2H, 0, 1)", "SwordAny", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(389, 0, -1, 0, 0, "", "", "Polearm", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(390, 0, -1, 0, 0, "", "", "Spear", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(391, 0, -1, 0, 0, "", "", "Wand", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(392, 0, -1, 0, 0, "", "", "ColdStaff", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(393, 0, -1, 0, 0, "", "", "FireStaff", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(394, 0, -1, 0, 0, "", "", "LightningStaff", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(395, 0, -1, 0, 0, "", "", "PoisonStaff", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(396, 0, -1, 0, 0, "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "StaffAny", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(397, 0, -1, 0, 0, "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Weapon1H", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(398, 0, -1, 0, 0, "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Weapon2H", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(399, 0, -1, 0, 0, "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "WeaponMelee", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(400, 0, -1, 0, 0, "Pin(ThrowingAxe + BowAny, 0, 1)", "Pin(ThrowingAxe + BowAny, 0, 1)", "WeaponRanged", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(401, 0, -1, 0, 0, "", "", "Quiver", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(402, -1, -1, 3, 1, "", "", "Reincarnation_Buff", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(403, -1, -1, 3, 1, "", "", "Dead_Body_AnimTag", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(404, -1, -1, 3, 1, "", "", "Spawned_by_ACDID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(405, -1, -1, 3, 1, "", "", "Summoned_By_ACDID", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(406, -1, -1, 3, 1, "", "", "Summoner_ID", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(407, -1, -1, 3, 1, "", "", "Banner_ACDID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(408, 0, -1, 0, 0, "", "", "Breakable_Shield_HP", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeI(409, -1, -1, 3, 1, "", "", "Current_WeaponClass", AttributeEncoding.IntMinMax, 31, -1, 19, 5));
            AttributesByID.Add( new AttributeB(410, 0, -1, 1, 1, "", "", "Weapons_Sheathed", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(411, 0, -1, 1, 1, "", "0", "Held_In_OffHand", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(412, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Attacks_Per_Second_Item_Subtotal )", "", "Attacks_Per_Second_Item_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(413, 0, -1, 0, 0, "(Held_In_OffHand ? Attacks_Per_Second_Item_Subtotal : 0)", "", "Attacks_Per_Second_Item_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(414, 0, -1, 0, 0, "Attacks_Per_Second_Item_MainHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(415, 0, -1, 0, 0, "Attacks_Per_Second_Item_OffHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(416, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Min_Total )", "", "Damage_Weapon_Min_Total_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(417, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Min_Total : 0)", "", "Damage_Weapon_Min_Total_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(418, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Delta_Total )", "", "Damage_Weapon_Delta_Total_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(419, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Delta_Total : 0)", "", "Damage_Weapon_Delta_Total_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(420, 0, -1, 0, 0, "", "(DualWield_Hand ? Attacks_Per_Second_Item_OffHand : Attacks_Per_Second_Item_MainHand)", "Attacks_Per_Second_Item_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(421, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Min_Total_OffHand : Damage_Weapon_Min_Total_MainHand)", "Damage_Weapon_Min_Total_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(422, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Delta_Total_OffHand : Damage_Weapon_Delta_Total_MainHand)", "Damage_Weapon_Delta_Total_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeI(423, -1, -1, 1, 1, "", "", "Has_Special_Death_AnimTag", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(424, -1, -1, 3, 1, "", "", "Death_Type_Override", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(425, 0, -1, 1, 1, "", "", "In_Combat", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeB(426, 0, -1, 3, 1, "", "", "In_Conversation", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(427, -1, -1, 3, 1, "", "", "Last_Tick_Potion_Used", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(428, 0, -1, 0, 0, "", "", "Potion_Dilution_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(429, 0, -1, 0, 0, "", "", "Out_Of_Combat_Health_Regen_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(430, 0, -1, 0, 0, "", "", "Out_Of_Combat_Mana_Regen_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(431, -1, -1, 3, 1, "", "", "Potion_Dilution_Duration", AttributeEncoding.IntMinMax, 0, -1, 16777214, 24));
            AttributesByID.Add( new AttributeF(432, 0, -1, 0, 0, "", "", "Potion_Dilution_Scalar", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeB(433, 0, -1, 1, 1, "", "", "Feared", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(434, 0, -1, 1, 1, "", "", "Fear_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(435, -1, -1, 3, 1, "", "", "Last_Damage_ACD", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(436, -1, -1, 3, 1, "", "", "Attached_To_ACD", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(437, -1, -1, 3, 1, "", "", "Attachment_ACD", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(438, -1, -1, 3, 1, "", "", "Normal_Attack_Replacement_Power_SNO", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeF(439, 0, 0, 0, 0, "", "", "Damage_Type_Override", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeF(440, 0, -1, 0, 0, "", "", "Minion_Count_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(441, 0, -1, 0, 1, "", "", "Champion_Teleport_Next_Tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(442, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(443, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(444, 0, -1, 0, 1, "", "", "Champion_Clone_Next_Tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(445, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(446, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(447, 0, -1, 0, 0, "", "", "Champion_Clone_Hitpoint_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(448, 0, -1, 0, 0, "", "", "Champion_Clone_Damage_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(449, 0, -1, 0, 1, "", "", "Champion_Ghostly_Next_Tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(450, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(451, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(452, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(453, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(454, 0, -1, 0, 0, "", "", "Champion_Ghostly_Saved_Dodge_Chance", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeB(455, 0, -1, 1, 1, "", "", "Champion_Ghostly", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(456, -1, -1, 1, 1, "", "", "Base_Element", AttributeEncoding.IntMinMax, 0, -1, 7, 4));
            AttributesByID.Add( new AttributeF(457, 0, -1, 0, 0, "", "", "Projectile_Amount_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(458, 0, 0, 0, 0, "", "", "Projectile_Reflect_Chance", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(459, 0, -1, 0, 0, "", "", "Attack_Fear_Chance", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(460, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Min", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(461, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Delta", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeB(462, 0, 9, 1, 1, "", "", "Buff_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(463, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick0", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(464, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick1", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(465, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick2", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(466, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick3", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(467, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick4", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(468, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick5", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(469, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick6", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(470, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick7", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(471, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick0", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(472, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick1", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(473, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick2", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(474, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick3", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(475, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick4", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(476, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick5", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(477, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick6", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(478, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick7", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(479, 0, -1, 1, 1, "", "", "Could_Have_Ragdolled", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(480, 0, -1, 1, 1, "", "", "Ambient_Damage_Effect_Last_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(481, 0, -1, 0, 0, "", "", "Scale_Bonus", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(482, 0, -1, 1, 1, "", "", "Deleted_On_Server", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(483, 0, -1, 1, 1, "", "", "Scripted_Fade_Time", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(484, 0, -1, 1, 1, "", "", "Does_No_Damage", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(485, 0, -1, 1, 1, "", "", "Does_Fake_Damage", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(486, 0, -1, 0, 0, "", "", "SlowTime_Debuff", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(487, 0, -1, 1, 1, "", "", "Blocks_Projectiles", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(488, 0, -1, 1, 1, "", "", "Frozen", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(489, 0, -1, 0, 0, "", "", "Freeze_Damage_Percent_Bonus", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeB(490, 0, 4, 1, 1, "", "", "Buff_Active", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeF(491, 0, -1, 0, 0, "", "", "DualWield_BothAttack_Chance", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(492, 0, -1, 0, 1, "", "", "Summon_Expiration_Tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(493, 0, -1, 0, 1, "", "", "Summon_Count", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(494, 0, -1, 1, 1, "", "", "Uninterruptible", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(495, 0, -1, 1, 1, "", "", "Queue Death", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(496, 0, -1, 1, 1, "", "", "CantStartDisplayedPowers", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(497, -1, -1, 3, 1, "", "", "Wizard_Slowtime_Proxy_ACD", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(498, 0, -1, 1, 0, "", "", "DPS", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeI(499, -1, -1, 3, 1, "", "", "Resurrection_Power", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(500, 0, -1, 1, 0, "", "", "Freeze_Damage", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(501, 0, -1, 0, 0, "", "", "Freeze_Capacity", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeF(502, 0, -1, 0, 0, "", "", "Thaw_Rate", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeF(503, 0, -1, 0, 0, "", "", "Chilled_Dur_Bonus_Percent", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeF(504, 0, -1, 0, 0, "", "", "DOT_DPS", AttributeEncoding.Float16Or32, 31, 0, 0, 0));
            AttributesByID.Add( new AttributeF(505, 0, -1, 1, 0, "", "", "DamageCap_Percent", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeI(506, 0, -1, 1, 1, "", "", "Item_Time_Sold", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(507, -1, -1, 3, 1, "", "", "Forced_Hireling_Power", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(508, 0, -1, 1, 1, "", "", "IsRooted", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(509, -1, -1, 3, 1, "", "", "RootTargetACD", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(510, 0, -1, 1, 0, "", "", "RootAutoDecayPerSecond", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(511, 0, -1, 1, 0, "", "", "RootUnitValue", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeI(512, 0, -1, 1, 1, "", "", "RootTotalTicks", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(513, 0, -1, 1, 1, "", "", "Hide_Affixes", AttributeEncoding.IntMinMax, 8, 0, 1, 1));
            AttributesByID.Add( new AttributeI(514, 0, 11, 0, 1, "", "", "Rune_A", AttributeEncoding.IntMinMax, 31, 0, 255, 8));
            AttributesByID.Add( new AttributeI(515, 0, 11, 0, 1, "", "", "Rune_B", AttributeEncoding.IntMinMax, 31, 0, 255, 8));
            AttributesByID.Add( new AttributeI(516, 0, 11, 0, 1, "", "", "Rune_C", AttributeEncoding.IntMinMax, 31, 0, 255, 8));
            AttributesByID.Add( new AttributeI(517, 0, 11, 0, 1, "", "", "Rune_D", AttributeEncoding.IntMinMax, 31, 0, 255, 8));
            AttributesByID.Add( new AttributeI(518, 0, 11, 0, 1, "", "", "Rune_E", AttributeEncoding.IntMinMax, 31, 0, 255, 8));
            AttributesByID.Add( new AttributeF(519, 0, -1, 0, 0, "", "", "Resistance_Stun", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(520, 0, -1, 0, 0, "", "Resistance_Stun + Resistance_StunRootFreeze", "Resistance_Stun_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(521, 0, -1, 0, 0, "", "", "Resistance_Root", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(522, 0, -1, 0, 0, "", "Resistance_Root + Resistance_StunRootFreeze", "Resistance_Root_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(523, 0, -1, 0, 0, "", "", "Resistance_Freeze", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(524, 0, -1, 0, 0, "", "Resistance_Freeze + Resistance_StunRootFreeze", "Resistance_Freeze_Total", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(525, 0, -1, 0, 0, "", "", "Resistance_StunRootFreeze", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(526, 0, -1, 7, 0, "", "", "CrowdControl_Reduction", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeB(527, 0, -1, 1, 1, "", "", "Displays_Team_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(528, 0, -1, 1, 1, "", "", "Cannot_Be_Added_To_AI_Target_List", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(529, -1, -1, 3, 1, "", "", "SkillKit", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeB(530, 0, -1, 1, 1, "", "", "Immune_To_Charm", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(531, 0, -1, 1, 1, "", "", "Immune_To_Blind", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(532, 0, -1, 1, 1, "", "", "Damage_Shield", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(533, 0, -1, 1, 1, "", "", "Silenced", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(534, 0, -1, 1, 1, "", "", "Diseased", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(535, -1, -1, 3, 1, "", "", "Guard_Object_ACDID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(536, -1, -1, 3, 1, "", "", "Follow_Target_ACDID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(537, 0, -1, 3, 1, "", "", "Follow_Target_Type", AttributeEncoding.IntMinMax, 0, 0, 2, 2));
            AttributesByID.Add( new AttributeI(538, -1, -1, 1, 1, "", "", "Forced_Enemy_ACDID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(539, -1, -1, 3, 1, "", "", "NPC_Talk_Target_ANN", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(540, -1, -1, 3, 1, "", "", "NPC_Conv_Target_ANN", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(541, -1, 3, 3, 1, "", "", "Script_Target_ACDID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(542, -1, -1, 1, 1, "", "", "Look_Target_Server_ANN", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(543, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Intensity", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(544, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Radius", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(545, 0, -1, 1, 1, "", "", "Stealthed", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(546, 0, -1, 4, 1, "", "", "GemQuality", AttributeEncoding.IntMinMax, 8, 0, 14, 4));
            AttributesByID.Add( new AttributeI(547, 0, 4, 1, 1, "", "0", "ItemBuffIcon", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(548, 0, -1, 1, 0, "", "0", "ScrollDuration", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(549, -1, -1, 3, 1, "", "", "Gizmo_Actor_SNO_To_Spawn", AttributeEncoding.Int, 4, 0, 0, 32));
            AttributesByID.Add( new AttributeF(550, 0, -1, 1, 0, "", "", "Gizmo_Actor_To_Spawn_Scale", AttributeEncoding.Float16, 4, 0, 0, 16));
            AttributesByID.Add( new AttributeI(551, -1, -1, 3, 1, "", "", "Death_Replacement_Power_SNO", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(552, 0, -1, 1, 1, "", "", "Attachment_Handled_By_Client", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(553, 0, -1, 1, 1, "", "", "AI_In_Special_State", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(554, 0, -1, 1, 1, "", "", "AI_Used_Scripted_Spawn_Anim", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(555, 0, -1, 1, 1, "", "", "AI_Spawned_By_Inactive_Marker", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(556, -1, -1, 3, 1, "", "", "Headstone_Player_ANN", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(557, 0, 10, 0, 0, "", "", "Resource_Cost_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(558, 0, 0, 0, 0, "", "", "Resistance_Penetration", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(559, 0, 0, 0, 0, "", "(Resistance_Penetration + Resistance_Penetration_All#NONE) * (Resistance_Penetration_Percent_All#NONE + 1)", "Resistance_Penetration_Total", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(560, 0, -1, 0, 0, "", "", "Resistance_Penetration_All", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(561, 0, -1, 0, 0, "", "", "Resistance_Penetration_Percent_All", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(562, 0, -1, 0, 1, "", "", "Fury_Effect_Level", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(563, 0, -1, 0, 0, "", "", "Health_Potion_Bonus_Heal_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(564, 0, 4, 1, 1, "", "", "Free_Cast", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeB(565, 0, -1, 1, 1, "", "", "Free_Cast_All", AttributeEncoding.IntMinMax, 9, 0, 1, 1));
            AttributesByID.Add( new AttributeF(566, 0, -1, 1, 0, "", "", "Movement_Scalar_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(567, 0, -1, 0, 0, "", "", "Movement_Scalar_Reduction_Resistance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(568, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(569, 0, -1, 0, 1, "", "", "World_Seed", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(570, 0, -1, 1, 1, "", "", "Kill_Count_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(571, 0, -1, 1, 1, "", "", "Object_Destruction_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(572, 0, -1, 1, 1, "", "", "Single_Attack_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(573, 0, -1, 1, 1, "", "", "Environment_Attack_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24));
            AttributesByID.Add( new AttributeB(574, 0, -1, 1, 1, "", "", "Root_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(575, 0, -1, 0, 0, "", "", "Monster_Play_Get_Hit_Bonus", AttributeEncoding.Float16Or32, 0, 0, 0, 0));
            AttributesByID.Add( new AttributeI(576, 0, -1, 1, 1, "", "", "Stored_Contact_Frame", AttributeEncoding.IntMinMax, 0, 0, 4, 3));
            AttributesByID.Add( new AttributeI(577, 0, 4, 0, 1, "", "", "Buff_Icon_Count0", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(578, 0, 4, 0, 1, "", "", "Buff_Icon_Count1", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(579, 0, 4, 0, 1, "", "", "Buff_Icon_Count2", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(580, 0, 4, 0, 1, "", "", "Buff_Icon_Count3", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(581, 0, 4, 0, 1, "", "", "Buff_Icon_Count4", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(582, 0, 4, 0, 1, "", "", "Buff_Icon_Count5", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(583, 0, 4, 0, 1, "", "", "Buff_Icon_Count6", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeI(584, 0, 4, 0, 1, "", "", "Buff_Icon_Count7", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24));
            AttributesByID.Add( new AttributeB(585, 0, -1, 1, 1, "", "", "Observer", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(586, 0, -1, 1, 1, "", "", "Resurrect_As_Observer", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(587, 0, -1, 1, 1, "", "", "Combo_Level", AttributeEncoding.IntMinMax, 0, 0, 3, 2));
            AttributesByID.Add( new AttributeI(588, 0, -1, 1, 1, "", "", "Combo_Time_Last_Move", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(589, 0, -1, 1, 1, "", "", "Burrowed", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(590, -1, -1, 3, 1, "", "", "Death_Replacement_Effect_Group_SNO", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(591, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Allowed_Game_Time", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(592, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Forced_Game_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(593, -1, -1, 3, 1, "", "", "Controlling_TimedEvent_SNO", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(594, 0, -1, 0, 0, "", "", "Casting_Speed_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeB(595, 0, -1, 1, 1, "", "", "Using_Bossbar", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(596, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(597, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(598, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(599, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(600, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(601, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(602, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(603, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(604, 0, 0, 3, 1, "", "", "Store SNO", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(605, 0, -1, 1, 1, "", "", "Busy", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(606, 0, -1, 1, 1, "", "", "Afk", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(607, 0, -1, 1, 1, "", "", "Last Action Timestamp", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(608, 0, -1, 1, 1, "", "", "Portal Next Time", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeF(609, 0, -1, 0, 0, "", "", "Repair_Discount_Percent", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(610, 0, -1, 1, 1, "", "", "Resource_Degeneration_Prevented", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(611, 0, -1, 4, 1, "", "", "Operatable", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(612, 0, -1, 0, 1, "", "", "Look_Override", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(613, -1, -1, 3, 1, "", "", "Spawner_Concurrent_Count_ID", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(614, 0, -1, 1, 1, "", "", "Disabled", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(615, -1, 3, 1, 1, "", "", "Skill_Override", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(616, 0, -1, 1, 1, "", "", "Skill_Override_Active", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(617, 0, 4, 1, 1, "", "", "Skill_Override_Ended", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(618, 0, -1, 1, 1, "", "", "Skill_Override_Ended_Active", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(619, 0, -1, 1, 1, "", "", "Is_Power_Proxy", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(620, 0, -1, 1, 1, "", "", "Force_No_Death_Animation", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(621, -1, -1, 1, 1, "", "", "Player_WeaponClass_Anim_Override", AttributeEncoding.IntMinMax, 31, -1, 19, 5));
            AttributesByID.Add( new AttributeB(622, 0, -1, 1, 1, "", "", "Operatable_Story_Gizmo", AttributeEncoding.IntMinMax, 4, 0, 1, 1));
            AttributesByID.Add( new AttributeB(623, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(624, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(625, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(626, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(627, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(628, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(629, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(630, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(631, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(632, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(633, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(634, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(635, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(636, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(637, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(638, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(639, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(640, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(641, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(642, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(643, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(644, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(645, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(646, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(647, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(648, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(649, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(650, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(651, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(652, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(653, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(654, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(655, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(656, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(657, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(658, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(659, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(660, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(661, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(662, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(663, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(664, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(665, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(666, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(667, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(668, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(669, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(670, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(671, -1, -1, 1, 1, "", "", "Walk_Passability_Power_SNO", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(672, -1, -1, 1, 1, "", "", "Passability_Power_SNO", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(673, -1, -1, 3, 1, "", "", "Flippy_ID", AttributeEncoding.Int, 8, 0, 0, 32));
            AttributesByID.Add( new AttributeI(674, 0, -1, 0, 1, "", "", "Summoning_Machine_Num_Casters", AttributeEncoding.IntMinMax, 0, 0, 255, 8));
            AttributesByID.Add( new AttributeI(675, 0, 15, 0, 1, "", "", "Summoning_Machine_Spawn_Count", AttributeEncoding.IntMinMax, 0, 0, 4095, 12));
            AttributesByID.Add( new AttributeI(676, 0, -1, 0, 1, "", "", "Summoning_Machine_Next_Spawn_Ticks", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(677, -1, -1, 1, 1, "", "", "Summoning_Machine_Spawn_Team", AttributeEncoding.IntMinMax, 0, -1, 23, 5));
            AttributesByID.Add( new AttributeF(678, 1114636288, -1, 3, 0, "", "", "Screen_Attack_Radius_Constant", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeF(679, 0, -1, 1, 0, "", "", "Damage_Done_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeI(680, 0, 17, 0, 1, "", "", "Set_Item_Count", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(681, 0, -1, 1, 0, "", "", "Spawner_Countdown_Percent", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(682, 0, -1, 1, 1, "", "", "Attack_Slow", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(683, 0, 4, 1, 1, "", "", "Power_Disabled", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(684, 0, -1, 1, 1, "", "", "Weapon_Effect_Override", AttributeEncoding.IntMinMax, 31, 0, 14, 4));
            AttributesByID.Add( new AttributeF(685, 0, -1, 0, 0, "", "", "Debuff_Duration_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16));
            AttributesByID.Add( new AttributeB(686, 0, -1, 1, 1, "", "", "Uses_PvP_Power_Tags", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(687, 0, 4, 1, 1, "", "", "Trait", AttributeEncoding.IntMinMax, 31, -1, 30, 5));
            AttributesByID.Add( new AttributeI(688, -1, -1, 3, 1, "", "", "Last_ACD_Attacked_By", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(689, 0, -1, 0, 0, "", "", "Gold_PickUp_Radius", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeI(690, 0, 12, 1, 1, "", "", "Client Only Effect", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(691, 0, -1, 1, 1, "", "", "Has_Doppelganger_Cloned", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(692, 0, 10, 0, 0, "", "", "Resource_Gain_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(693, 0, -1, 1, 1, "", "", "Looping_Animation_Start_Time", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeI(694, 0, -1, 1, 1, "", "", "Looping_Animation_End_Time", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(695, 0, -1, 1, 1, "", "", "Looping_Animation_Suppress_Item_Tooltips", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(696, -1, -1, 3, 1, "", "", "Heal_Effect_Last_Played_Tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(697, -1, 10, 3, 1, "", "", "Resource_Effect_Last_Played_tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(698, -1, -1, 3, 1, "", "", "Thorns_Effect_Last_Played_tick", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(699, 0, -1, 0, 1, "", "", "PVP_Kills", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(700, 0, -1, 0, 1, "", "", "PVP_Deaths", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(701, 0, -1, 0, 1, "", "", "PVP_Assists", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(702, 0, -1, 0, 1, "", "", "PVP_Progression_Points_Gained", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(703, 0, -1, 0, 1, "", "", "PVP_Current_Kill_Streak", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(704, 0, -1, 0, 1, "", "", "PVP_Current_Death_Streak", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(705, 0, -1, 0, 1, "", "", "PVP_Longest_Kill_Streak", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(706, 0, -1, 0, 1, "", "", "PVP_Longest_Death_Streak", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeF(707, 1065353216, -1, 5, 0, "", "", "Turn_Rate_Scalar", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(708, 1065353216, -1, 5, 0, "", "", "Turn_Accel_Scalar", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeF(709, 1065353216, -1, 5, 0, "", "", "Turn_Deccel_Scalar", AttributeEncoding.Float16, 31, 0, 0, 16));
            AttributesByID.Add( new AttributeB(710, 0, -1, 1, 1, "", "", "No_Health_Drop", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(711, 0, -1, 1, 1, "", "", "Leader", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(712, 0, -1, 1, 1, "", "", "IsContentRestrictedActor", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(713, 0, -1, 1, 1, "", "", "InBossEncounter", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeB(714, 0, -1, 1, 1, "", "", "God", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(715, 0, -1, 1, 1, "", "", "MinimapActive", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(716, -1, -1, 0, 1, "", "", "MinimapIconOverride", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeB(717, 0, -1, 1, 1, "", "", "MinimapDisableArrow", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeI(718, -1, -1, 3, 1, "", "", "Last_Blocked_ACD", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(719, 0, -1, 1, 1, "", "", "Last_Blocked_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(720, 0, -1, 1, 1, "", "", "Deactivate Lure", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(721, 0, -1, 1, 1, "", "", "Weapons_Hidden", AttributeEncoding.IntMinMax, 31, 0, 1, 1));
            AttributesByID.Add( new AttributeB(722, 0, -1, 1, 1, "", "", "Actor_Updates_Attributes_From_Owner", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeI(723, -1, -1, 1, 1, "", "", "Taunt_Target_ACD", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeF(724, 0, -1, 0, 0, "", "", "UI_Only_Percent_Damage_Increase", AttributeEncoding.Float16, 1, 0, 0, 16));
            AttributesByID.Add( new AttributeI(725, -1, -1, 3, 1, "", "", "Projectile_Effect_SNO", AttributeEncoding.Int, 31, 0, 0, 32));
            AttributesByID.Add( new AttributeF(726, 0, -1, 7, 0, "", "", "On_Hit_Fear_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(727, 0, -1, 7, 0, "", "", "On_Hit_Stun_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(728, 0, -1, 7, 0, "", "", "On_Hit_Blind_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(729, 0, -1, 7, 0, "", "", "On_Hit_Freeze_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(730, 0, -1, 7, 0, "", "", "On_Hit_Chill_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(731, 0, -1, 7, 0, "", "", "On_Hit_Slow_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(732, 0, -1, 7, 0, "", "", "On_Hit_Immobilize_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(733, 0, -1, 7, 0, "", "", "On_Hit_Knockback_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(734, 0, -1, 7, 0, "", "", "On_Hit_Bleed_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(735, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Base", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(736, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(737, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Ranged", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(738, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Melee", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(739, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_Turns_Into_Heal", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(740, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Elites", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(741, 0, 0, 7, 0, "", "", "Damage_Percent_Reduction_From_Type", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(742, 0, 18, 7, 0, "", "", "Damage_Percent_Bonus_Vs_Monster_Type", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(743, 0, -1, 7, 0, "", "", "Damage_Percent_Bonus_Vs_Elites", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeI(744, 0, -1, 4, 1, "", "", "Item_Manipulation_Timeout", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(745, 0, -1, 4, 1, "", "", "Picked_Up_Time", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(746, 1, 19, 4, 1, "", "", "Unequipped Time", AttributeEncoding.Int, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeI(747, 0, -1, 4, 1, "", "", "Last_ACD_Killed_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(748, 0, -1, 1, 1, "", "", "CannotDieDuring", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeF(749, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(750, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(751, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(752, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(753, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(754, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(755, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(756, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(757, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(758, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(759, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(760, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Fear_Proc_Chance )", "", "Weapon_On_Hit_Fear_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(761, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Fear_Proc_Chance : 0)", "", "Weapon_On_Hit_Fear_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(762, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Fear_Proc_Chance_OffHand : Weapon_On_Hit_Fear_Proc_Chance_MainHand)", "Weapon_On_Hit_Fear_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(763, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Stun_Proc_Chance )", "", "Weapon_On_Hit_Stun_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(764, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Stun_Proc_Chance : 0)", "", "Weapon_On_Hit_Stun_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(765, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Stun_Proc_Chance_OffHand : Weapon_On_Hit_Stun_Proc_Chance_MainHand)", "Weapon_On_Hit_Stun_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(766, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Blind_Proc_Chance )", "", "Weapon_On_Hit_Blind_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(767, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Blind_Proc_Chance : 0)", "", "Weapon_On_Hit_Blind_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(768, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Blind_Proc_Chance_OffHand : Weapon_On_Hit_Blind_Proc_Chance_MainHand)", "Weapon_On_Hit_Blind_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(769, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Freeze_Proc_Chance )", "", "Weapon_On_Hit_Freeze_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(770, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Freeze_Proc_Chance : 0)", "", "Weapon_On_Hit_Freeze_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(771, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Freeze_Proc_Chance_OffHand : Weapon_On_Hit_Freeze_Proc_Chance_MainHand)", "Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(772, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Chill_Proc_Chance )", "", "Weapon_On_Hit_Chill_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(773, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Chill_Proc_Chance : 0)", "", "Weapon_On_Hit_Chill_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(774, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Chill_Proc_Chance_OffHand : Weapon_On_Hit_Chill_Proc_Chance_MainHand)", "Weapon_On_Hit_Chill_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(775, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Slow_Proc_Chance )", "", "Weapon_On_Hit_Slow_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(776, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Slow_Proc_Chance : 0)", "", "Weapon_On_Hit_Slow_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(777, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Slow_Proc_Chance_OffHand : Weapon_On_Hit_Slow_Proc_Chance_MainHand)", "Weapon_On_Hit_Slow_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(778, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Immobilize_Proc_Chance )", "", "Weapon_On_Hit_Immobilize_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(779, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Immobilize_Proc_Chance : 0)", "", "Weapon_On_Hit_Immobilize_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(780, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Immobilize_Proc_Chance_OffHand : Weapon_On_Hit_Immobilize_Proc_Chance_MainHand)", "Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(781, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Knockback_Proc_Chance )", "", "Weapon_On_Hit_Knockback_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(782, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Knockback_Proc_Chance : 0)", "", "Weapon_On_Hit_Knockback_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(783, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Knockback_Proc_Chance_OffHand : Weapon_On_Hit_Knockback_Proc_Chance_MainHand)", "Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(784, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Chance )", "", "Weapon_On_Hit_Bleed_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(785, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Chance : 0)", "", "Weapon_On_Hit_Bleed_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(786, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Bleed_Proc_Chance_MainHand)", "Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(787, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Damage_Base )", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(788, 0, -1, 0, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Damage_Base : 0)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(789, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand)", "Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(790, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Damage_Delta )", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(791, 0, -1, 0, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta : 0)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(792, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand)", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0));
            AttributesByID.Add( new AttributeF(793, 0, 4, 0, 0, "", "", "Power_Damage_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(794, 0, 4, 0, 0, "", "", "Power_Resource_Reduction", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(795, 0, 4, 0, 0, "", "", "Power_Cooldown_Reduction", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(796, 0, 4, 0, 0, "", "", "Power_Duration_Increase", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(797, 0, 4, 0, 0, "", "", "Power_Crit_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(798, 0, -1, 7, 0, "", "", "Weapon_Crit_Chance", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(799, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_Crit_Chance )", "", "Weapon_Crit_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(800, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_Crit_Chance : 0)", "", "Weapon_Crit_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(801, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_Crit_Chance_OffHand : Weapon_Crit_Chance_MainHand)", "Weapon_Crit_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeF(802, 0, -1, 0, 0, "", "", "Strength_Item", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(803, 0, -1, 0, 0, "", "", "Dexterity_Item", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(804, 0, -1, 0, 0, "", "", "Intelligence_Item", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(805, 0, -1, 0, 0, "", "", "Vitality_Item", AttributeEncoding.Float32, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeI(806, 0, -1, 0, 1, "", "", "Item_Level_Requirement_Reduction", AttributeEncoding.Int, 9, 0, 0, 32));
            AttributesByID.Add( new AttributeF(807, 0, -1, 0, 0, "", "", "Item_Durability_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16));
            AttributesByID.Add( new AttributeB(808, 0, -1, 1, 1, "", "", "Item_Indestructible", AttributeEncoding.IntMinMax, 8, 0, 1, 1));
            AttributesByID.Add( new AttributeF(809, 1065353216, -1, 1, 0, "", "", "Core_Attributes_From_Item_Bonus_Multiplier", AttributeEncoding.Float32, 1, 0, 0, 32));
            AttributesByID.Add( new AttributeB(810, 0, -1, 1, 1, "", "", "Waiting_To_Accept_Resurrection", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeB(811, 0, -1, 1, 1, "", "", "Ghosted", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeB(812, 0, -1, 1, 1, "", "", "Special_Inventory_Has_Sold", AttributeEncoding.IntMinMax, 2, 0, 1, 1));
            AttributesByID.Add( new AttributeI(813, 0, -1, 4, 1, "", "", "Power_Channel_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(814, 0, 4, 4, 1, "", "", "Power_Buff_0_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(815, 0, 4, 4, 1, "", "", "Power_Buff_1_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(816, 0, 4, 4, 1, "", "", "Power_Buff_2_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(817, 0, 4, 4, 1, "", "", "Power_Buff_3_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(818, 0, 4, 4, 1, "", "", "Power_Buff_4_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(819, 0, 4, 4, 1, "", "", "Power_Buff_5_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(820, 0, 4, 4, 1, "", "", "Power_Buff_6_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(821, 0, 4, 4, 1, "", "", "Power_Buff_7_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeI(822, -1, -1, 4, 1, "", "", "Known_By_Owner", AttributeEncoding.Int, 0, 0, 0, 32));
            AttributesByID.Add( new AttributeB(823, 0, -1, 1, 1, "", "", "Never_Deactivates", AttributeEncoding.IntMinMax, 0, 0, 1, 1));
            AttributesByID.Add( new AttributeB(824, 0, -1, 1, 1, "", "", "Account_Under_Review", AttributeEncoding.IntMinMax, 1, 0, 1, 1));
            AttributesByID.Add( new AttributeI(825, 0, -1, 4, 1, "", "", "Projectile_Detonate_Time", AttributeEncoding.Int, 64, 0, 0, 32));

            /*foreach (var item in Attributes)
            {
                AttributesIDsbyName.Add(item.Name,item.Id);
            }

            foreach (var item in Attributes)
            {
                //GlobalForm.Form.comboBox_Attribute.Items.Add(item.Name);
            }*/
           
        }

        public static readonly AttributeF Axe_Bad_Data = new AttributeF(0, 0, -1, 0, 0, "", "", "Axe_Bad_Data", AttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly AttributeI Attribute_Timer = new AttributeI(1, 0, 5, 0, 1, "", "", "Attribute_Timer", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Attribute_Pool = new AttributeI(2, 0, -1, 0, 1, "", "", "Attribute_Pool", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Death_Count = new AttributeI(3, 0, -1, 0, 1, "", "", "Death_Count", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI DualWield_Hand = new AttributeI(4, 0, -1, 0, 1, "", "", "DualWield_Hand", AttributeEncoding.IntMinMax, 1, 0, 2, 2);
        public static readonly AttributeI DualWield_Hand_Next = new AttributeI(5, 0, -1, 0, 1, "", "", "DualWield_Hand_Next", AttributeEncoding.IntMinMax, 1, 0, 2, 2);
        public static readonly AttributeB DualWield_Hands_Swapped = new AttributeB(6, 0, -1, 0, 1, "", "", "DualWield_Hands_Swapped", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeI Respawn_Game_Time = new AttributeI(7, 0, -1, 0, 1, "", "", "Respawn_Game_Time", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Backpack_Slots = new AttributeI(8, 0, -1, 0, 1, "", "", "Backpack_Slots", AttributeEncoding.IntMinMax, 1, 0, 128, 8);
        public static readonly AttributeI Shared_Stash_Slots = new AttributeI(9, 0, -1, 0, 1, "", "", "Shared_Stash_Slots", AttributeEncoding.IntMinMax, 1, 0, 210, 8);
        public static readonly AttributeF Strength = new AttributeF(10, 0, -1, 0, 0, "", "", "Strength", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Dexterity = new AttributeF(11, 0, -1, 0, 0, "", "", "Dexterity", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Intelligence = new AttributeF(12, 0, -1, 0, 0, "", "", "Intelligence", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Vitality = new AttributeF(13, 0, -1, 0, 0, "", "", "Vitality", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Strength_Total = new AttributeF(14, 0, -1, 0, 0, "", "((Strength + Stats_All_Bonus + Strength_Requeriment + (Strength_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Strength_Requeriment_Percent)) * (1 - Strength_Reduction_Percent)", "Strength_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Dexterity_Total = new AttributeF(15, 0, -1, 0, 0, "", "((Dexterity + Stats_All_Bonus + Dexterity_Requeriment + (Dexterity_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Dexterity_Requeriment_Percent)) * (1 - Dexterity_Reduction_Percent)", "Dexterity_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Intelligence_Total = new AttributeF(16, 0, -1, 0, 0, "", "((Intelligence + Stats_All_Bonus + Intelligence_Requeriment + (Intelligence_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Intelligence_Requeriment_Percent)) * (1 - Intelligence_Reduction_Percent)", "Intelligence_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Vitality_Total = new AttributeF(17, 0, -1, 0, 0, "", "((Vitality + Stats_All_Bonus + Vitality_Requeriment + (Vitality_Item * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Vitality_Requeriment_Percent)) * (1 - Vitality_Reduction_Percent)", "Vitality_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Strength_Requeriment = new AttributeF(18, 0, -1, 0, 0, "", "", "Strength_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Dexterity_Requeriment = new AttributeF(19, 0, -1, 0, 0, "", "", "Dexterity_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Intelligence_Requeriment = new AttributeF(20, 0, -1, 0, 0, "", "", "Intelligence_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Vitality_Requeriment = new AttributeF(21, 0, -1, 0, 0, "", "", "Vitality_Requeriment", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Strength_Requeriment_Percent = new AttributeF(22, 0, -1, 0, 0, "", "", "Strength_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Dexterity_Requeriment_Percent = new AttributeF(23, 0, -1, 0, 0, "", "", "Dexterity_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Intelligence_Requeriment_Percent = new AttributeF(24, 0, -1, 0, 0, "", "", "Intelligence_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Vitality_Requeriment_Percent = new AttributeF(25, 0, -1, 0, 0, "", "", "Vitality_Requeriment_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Strength_Reduction_Percent = new AttributeF(26, 0, -1, 1, 0, "", "", "Strength_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Dexterity_Reduction_Percent = new AttributeF(27, 0, -1, 1, 0, "", "", "Dexterity_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Intelligence_Reduction_Percent = new AttributeF(28, 0, -1, 1, 0, "", "", "Intelligence_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Vitality_Reduction_Percent = new AttributeF(29, 0, -1, 1, 0, "", "", "Vitality_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI Primary_Damage_Attribute = new AttributeI(30, -1, -1, 3, 1, "", "", "Primary_Damage_Attribute", AttributeEncoding.IntMinMax, 31, -1, 3, 3);
        public static readonly AttributeF Attack = new AttributeF(31, 0, -1, 0, 0, "", "", "Attack", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Precision = new AttributeF(32, 0, -1, 0, 0, "", "", "Precision", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Defense = new AttributeF(33, 0, -1, 0, 0, "", "", "Defense", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Attack_Total = new AttributeF(34, 0, -1, 0, 0, "", "((Attack + Stats_All_Bonus + Attack_Bonus) * (1 + Attack_Bonus_Percent)) * (1 - Attack_Reduction_Percent)", "Attack_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Precision_Total = new AttributeF(35, 0, -1, 0, 0, "", "((Precision + Stats_All_Bonus + Precision_Bonus) * (1 + Precision_Bonus_Percent)) * (1 - Precision_Reduction_Percent)", "Precision_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Defense_Total = new AttributeF(36, 0, -1, 0, 0, "", "((Defense + Stats_All_Bonus + Defense_Bonus) * (1 + Defense_Bonus_Percent)) * (1 - Defense_Reduction_Percent)", "Defense_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Attack_Bonus = new AttributeF(37, 0, -1, 0, 0, "", "", "Attack_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Precision_Bonus = new AttributeF(38, 0, -1, 0, 0, "", "", "Precision_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Defense_Bonus = new AttributeF(39, 0, -1, 0, 0, "", "", "Defense_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attack_Bonus_Percent = new AttributeF(40, 0, -1, 0, 0, "", "", "Attack_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Precision_Bonus_Percent = new AttributeF(41, 0, -1, 0, 0, "", "", "Precision_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Defense_Bonus_Percent = new AttributeF(42, 0, -1, 0, 0, "", "", "Defense_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attack_Reduction_Percent = new AttributeF(43, 0, -1, 1, 0, "", "", "Attack_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Precision_Reduction_Percent = new AttributeF(44, 0, -1, 1, 0, "", "", "Precision_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Defense_Reduction_Percent = new AttributeF(45, 0, -1, 1, 0, "", "", "Defense_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Armor = new AttributeF(46, 0, -1, 0, 0, "", "", "Armor", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Bonus_Percent = new AttributeF(47, 0, -1, 0, 0, "", "", "Armor_Bonus_Percent", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Item = new AttributeF(48, 0, -1, 0, 0, "", "0", "Armor_Item", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Bonus_Item = new AttributeF(49, 0, -1, 0, 0, "", "", "Armor_Bonus_Item", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Item_Percent = new AttributeF(50, 0, -1, 0, 0, "", "0", "Armor_Item_Percent", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Item_SubTotal = new AttributeF(51, 0, -1, 0, 0, "FLOOR((Armor_Item + Armor_Bonus_Item) * (Armor_Item_Percent + 1))", "", "Armor_Item_SubTotal", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Item_Total = new AttributeF(52, 0, -1, 0, 0, "(Armor_Item > 0)?(Max(Armor_Item_SubTotal, 1)):Armor_Item_SubTotal", "", "Armor_Item_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Armor_Total = new AttributeF(53, 0, -1, 0, 0, "", "FLOOR((Armor + Armor_Item_Total + Strength_Total) * (Armor_Bonus_Percent + 1))", "Armor_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeI Experience_Granted = new AttributeI(54, 0, -1, 0, 1, "", "", "Experience_Granted", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Experience_Next = new AttributeI(55, 0, -1, 0, 1, "", "", "Experience_Next", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Gold_Granted = new AttributeI(56, 0, -1, 0, 1, "", "", "Gold_Granted", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeI Gold = new AttributeI(57, 0, -1, 0, 1, "", "", "Gold", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeF Gold_Find = new AttributeF(58, 0, -1, 0, 0, "", "", "Gold_Find", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Level = new AttributeI(59, 0, -1, 0, 1, "", "", "Level", AttributeEncoding.IntMinMax, 31, -1, 127, 8);
        public static readonly AttributeI Level_Requeriment = new AttributeI(60, 0, -1, 0, 1, "", "", "Level_Requeriment", AttributeEncoding.IntMinMax, 1, -1, 127, 8);
        public static readonly AttributeF Magic_Find = new AttributeF(61, 0, -1, 0, 0, "", "", "Magic_Find", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeB Magic_And_Gold_Find_Suppressed = new AttributeB(62, 0, -1, 1, 1, "", "", "Magic_And_Gold_Find_Suppressed", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF Treasure_Find = new AttributeF(63, 0, 14, 0, 0, "", "", "Treasure_Find", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Resource_Cost_Reduction_Amount = new AttributeI(64, 0, 10, 0, 1, "", "", "Resource_Cost_Reduction_Amount", AttributeEncoding.IntMinMax, 9, -4095, 16383, 15);
        public static readonly AttributeF Resource_Cost_Reduction_Total = new AttributeF(65, 0, 10, 0, 0, "", "Resource_Cost_Reduction_Amount", "Resource_Cost_Reduction_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resource_Set_Point_Bonus = new AttributeF(66, 0, 10, 0, 0, "", "", "Resource_Set_Point_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Faster_Healing_Percent = new AttributeF(67, 0, -1, 0, 0, "", "", "Faster_Healing_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Spending_Resource_Heals_Percent = new AttributeF(68, 0, 10, 0, 0, "", "", "Spending_Resource_Heals_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Bonus_Healing_Received_Percent = new AttributeF(69, 0, -1, 0, 0, "", "", "Bonus_Healing_Received_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Reduced_Healing_Received_Percent = new AttributeF(70, 0, -1, 0, 0, "", "", "Reduced_Healing_Received_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Experience_Bonus = new AttributeF(71, 0, -1, 0, 0, "", "", "Experience_Bonus", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Experience_Bonus_Percent = new AttributeF(72, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Health_Globe_Bonus_Chance = new AttributeF(73, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Health_Globe_Bonus_Mult_Chance = new AttributeF(74, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Mult_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Health_Globe_Bonus_Health = new AttributeF(75, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Health", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Increased_Health_From_Globes_Percent = new AttributeF(76, 0, -1, 0, 0, "", "", "Increased_Health_From_Globes_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Increased_Health_From_Globes_Percent_Total = new AttributeF(77, 0, -1, 0, 0, "", "Increased_Health_From_Globes_Percent", "Increased_Health_From_Globes_Percent_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Bonus_Health_Percent_Per_Second_From_Globes = new AttributeF(78, 0, -1, 0, 0, "", "", "Bonus_Health_Percent_Per_Second_From_Globes", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Bonus_Health_Percent_Per_Second_From_Globes_Total = new AttributeF(79, 0, -1, 0, 0, "", "Bonus_Health_Percent_Per_Second_From_Globes", "Bonus_Health_Percent_Per_Second_From_Globes_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Mana_Gained_From_Globes_Percent = new AttributeF(80, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Mana_Gained_From_Globes = new AttributeF(81, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance = new AttributeF(82, 0, 0, 0, 0, "", "", "Resistance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Percent = new AttributeF(83, 0, 0, 0, 0, "", "", "Resistance_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Total = new AttributeF(84, 0, 0, 0, 0, "", "(Resistance + Resistance_All#NONE + Resistance_From_Intelligence#NONE) * ((Resistance_Percent_All#NONE + Resistance_Percent + 1))", "Resistance_Total", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Resistance_All = new AttributeF(85, 0, -1, 0, 0, "", "", "Resistance_All", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Percent_All = new AttributeF(86, 0, -1, 0, 0, "", "", "Resistance_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_From_Intelligence = new AttributeF(87, 0, -1, 0, 0, "", "(Intelligence_Total * 0.1)", "Resistance_From_Intelligence", AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly AttributeF Class_Damage_Reduction_Percent = new AttributeF(88, 0, -1, 0, 0, "", "", "Class_Damage_Reduction_Percent", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeI Skill = new AttributeI(89, 0, 4, 0, 1, "", "", "Skill", AttributeEncoding.IntMinMax, 9, 0, 4095, 12);
        public static readonly AttributeI Skill_Total = new AttributeI(90, 0, 4, 0, 1, "", "Skill", "Skill_Total", AttributeEncoding.IntMinMax, 9, 0, 4095, 12);
        public static readonly AttributeI TeamID = new AttributeI(91, -1, -1, 1, 1, "", "", "TeamID", AttributeEncoding.IntMinMax, 31, -1, 23, 5);
        public static readonly AttributeI Team_Override = new AttributeI(92, -1, -1, 1, 1, "", "", "Team_Override", AttributeEncoding.IntMinMax, 31, -1, 23, 5);
        public static readonly AttributeB Invulnerable = new AttributeB(93, 0, -1, 1, 1, "", "", "Invulnerable", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Loading = new AttributeB(94, 0, -1, 1, 1, "", "", "Loading", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Loading_Player_ACD = new AttributeI(95, -1, -1, 3, 1, "", "", "Loading_Player_ACD", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Loading_Power_SNO = new AttributeI(96, -1, -1, 3, 1, "", "", "Loading_Power_SNO", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Loading_Anim_Tag = new AttributeI(97, -1, -1, 3, 1, "", "", "Loading_Anim_Tag", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeB Loading_NewGame = new AttributeB(98, 0, -1, 1, 1, "", "", "Loading_NewGame", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Auto_Porting_To_Save_Point = new AttributeB(99, 0, -1, 1, 1, "", "", "Auto_Porting_To_Save_Point", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB No_Damage = new AttributeB(100, 0, -1, 1, 1, "", "", "No_Damage", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB No_AutoPickup = new AttributeB(101, 0, -1, 1, 1, "", "", "No_AutoPickup", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Light_Radius_Percent_Bonus = new AttributeF(102, 0, 0, 0, 0, "", "", "Light_Radius_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Hitpoints_Cur = new AttributeF(103, 0, -1, 0, 0, "", "Min(Hitpoints_Cur.Agg, Hitpoints_Max_Total)", "Hitpoints_Cur", AttributeEncoding.Float32, 31, 0, 0, 32);
        public static readonly AttributeF Hitpoints_Factor_Level = new AttributeF(104, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Level", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Factor_Vitality = new AttributeF(105, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Vitality", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Total_From_Vitality = new AttributeF(106, 0, -1, 0, 0, "", "Vitality_Total * Hitpoints_Factor_Vitality", "Hitpoints_Total_From_Vitality", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Total_From_Level = new AttributeF(107, 0, -1, 0, 0, "", "(Level - 1) * Hitpoints_Factor_Level", "Hitpoints_Total_From_Level", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Granted = new AttributeF(108, 0, -1, 0, 0, "", "", "Hitpoints_Granted", AttributeEncoding.Float32, 31, 0, 0, 32);
        public static readonly AttributeI Hitpoints_Granted_Duration = new AttributeI(109, 0, -1, 0, 1, "", "", "Hitpoints_Granted_Duration", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeF Hitpoints_Max = new AttributeF(110, 0, -1, 0, 0, "", "", "Hitpoints_Max", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Max_Bonus = new AttributeF(111, 0, -1, 0, 0, "", "", "Hitpoints_Max_Bonus", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Max_Total = new AttributeF(112, 0, -1, 0, 0, "", "Max((Hitpoints_Max + Hitpoints_Total_From_Level + Hitpoints_Total_From_Vitality + Hitpoints_Max_Bonus) * (Hitpoints_Max_Percent_Bonus + Hitpoints_Max_Percent_Bonus_Item + 1), 1)", "Hitpoints_Max_Total", AttributeEncoding.Float32, 31, 0, 0, 32);
        public static readonly AttributeF Hitpoints_Percent = new AttributeF(113, 0, -1, 0, 0, "", "", "Hitpoints_Percent", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Hitpoints_Regen_Per_Second = new AttributeF(114, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Hitpoints_Max_Percent_Bonus = new AttributeF(115, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Hitpoints_Max_Percent_Bonus_Item = new AttributeF(116, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus_Item", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Hitpoints_Healed_Target = new AttributeF(117, 0, -1, 0, 0, "", "", "Hitpoints_Healed_Target", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeI Resource_Type_Primary = new AttributeI(118, -1, -1, 3, 1, "", "", "Resource_Type_Primary", AttributeEncoding.IntMinMax, 1, -1, 7, 4);
        public static readonly AttributeI Resource_Type_Secondary = new AttributeI(119, -1, -1, 3, 1, "", "", "Resource_Type_Secondary", AttributeEncoding.IntMinMax, 1, -1, 7, 4);
        //LA CONCHA DE MI MADRE FLOAT E INT NO FUNCIONAN IGUAL
        //public static readonly AttributeI Mana_Cur = new AttributeI(120, 0, 10, 0, 0, "", "Max(Mana_Cur.Agg, 0)", "Mana_Cur", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeF Mana_Cur = new AttributeF(120, 0, 10, 0, 0, "", "Max(Mana_Cur.Agg, 0)", "Mana_Cur", AttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly AttributeF Mana_Max = new AttributeF(121, 0, 10, 0, 0, "", "", "Mana_Max", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Mana_Max_Bonus = new AttributeF(122, 0, 10, 0, 0, "", "", "Mana_Max_Bonus", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Mana_Max_Total = new AttributeF(123, 0, 10, 0, 0, "", "Max((Mana_Max + ((Level#NONE - 1) * Resource_Factor_Level) + Mana_Max_Bonus) * (Mana_Max_Percent_Bonus + 1), 0)", "Mana_Max_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Resource_Factor_Level = new AttributeF(124, 0, 10, 0, 0, "", "", "Resource_Factor_Level", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Resource_Granted = new AttributeF(125, 0, 10, 0, 0, "", "", "Resource_Granted", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Resource_Granted_Duration = new AttributeI(126, 0, 10, 0, 1, "", "", "Resource_Granted_Duration", AttributeEncoding.IntMinMax, 9, 0, 16777215, 24);
        public static readonly AttributeF Resource_Percent = new AttributeF(127, 0, 10, 0, 0, "", "", "Resource_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resource_Regen_Per_Second = new AttributeF(128, 0, 10, 0, 0, "", "", "Resource_Regen_Per_Second", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Resource_Regen_Bonus_Percent = new AttributeF(129, 0, 10, 0, 0, "", "", "Resource_Regen_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resource_Regen_Total = new AttributeF(130, 0, 10, 0, 0, "", "Resource_Regen_Per_Second * (1 + Resource_Regen_Bonus_Percent) + (Resource_Regen_Percent_Per_Second * Mana_Max_Total)", "Resource_Regen_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Mana_Max_Percent_Bonus = new AttributeF(131, 0, 10, 0, 0, "", "Resource_Percent", "Mana_Max_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resource_Capacity_Used = new AttributeF(132, 0, 10, 0, 0, "", "", "Resource_Capacity_Used", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Resource_Effective_Max = new AttributeF(133, 0, 10, 0, 0, "", "Mana_Max_Total - Resource_Capacity_Used", "Resource_Effective_Max", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Resource_Regen_Percent_Per_Second = new AttributeF(134, 0, 10, 0, 0, "", "", "Resource_Regen_Percent_Per_Second", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Resource_Degeneration_Stop_Point = new AttributeF(135, 0, 10, 0, 0, "", "", "Resource_Degeneration_Stop_Point", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Movement_Scalar = new AttributeF(136, 0, -1, 0, 0, "", "", "Movement_Scalar", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Walking_Rate = new AttributeF(137, 0, -1, 0, 0, "", "", "Walking_Rate", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Running_Rate = new AttributeF(138, 0, -1, 0, 0, "", "", "Running_Rate", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Sprinting_Rate = new AttributeF(139, 0, -1, 0, 0, "", "", "Sprinting_Rate", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Strafing_Rate = new AttributeF(140, 0, -1, 0, 0, "", "", "Strafing_Rate", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Walking_Rate_Total = new AttributeF(141, 0, -1, 0, 0, "", "Walking_Rate * Movement_Scalar_Total", "Walking_Rate_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Running_Rate_Total = new AttributeF(142, 0, -1, 0, 0, "", "Running_Rate * Movement_Scalar_Total", "Running_Rate_Total", AttributeEncoding.Float16, 41, 0, 0, 16);
        public static readonly AttributeF Last_Running_Rate = new AttributeF(143, 0, -1, 0, 0, "", "", "Last_Running_Rate", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Sprinting_Rate_Total = new AttributeF(144, 0, -1, 0, 0, "", "Sprinting_Rate * Movement_Scalar_Total", "Sprinting_Rate_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Strafing_Rate_Total = new AttributeF(145, 0, -1, 0, 0, "", "Strafing_Rate * Movement_Scalar_Total", "Strafing_Rate_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Bonus_Total = new AttributeF(146, 0, -1, -1, 0, "0", "Movement_Bonus_Run_Speed", "Movement_Bonus_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Scalar_Subtotal = new AttributeF(147, 0, -1, 0, 0, "0", "Max(0.1, Movement_Scalar) * (1 + Movement_Bonus_Total) * (1 - Movement_Scalar_Reduction_Percent * (1 - Min(1, Movement_Scalar_Reduction_Resistance)))", "Movement_Scalar_Subtotal", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Scalar_Capped_Total = new AttributeF(148, 0, -1, 0, 0, "0", "Min(1.25, Movement_Scalar_Subtotal)", "Movement_Scalar_Capped_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Scalar_Uncapped_Bonus = new AttributeF(149, 0, -1, 0, 0, "", "", "Movement_Scalar_Uncapped_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Scalar_Total = new AttributeF(150, 0, -1, 0, 0, "0", "Movement_Scalar_Capped_Total + Movement_Scalar_Uncapped_Bonus", "Movement_Scalar_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Bonus_Run_Speed = new AttributeF(151, 0, -1, 1, 0, "", "", "Movement_Bonus_Run_Speed", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Speed = new AttributeF(152, 0, -1, 0, 0, "", "", "Speed", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Casting_Speed_Bonus = new AttributeF(153, 0, -1, 0, 0, "", "", "Casting_Speed_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Casting_Speed_Total = new AttributeF(154, 0, -1, 0, 0, "", "(Casting_Speed + Casting_Speed_Bonus) * Max(0.1, 1 + Casting_Speed_Percent)", "Casting_Speed_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeB Always_Hits = new AttributeB(155, 0, -1, 1, 1, "", "", "Always_Hits", AttributeEncoding.IntMinMax, 3, 0, 1, 1);
        public static readonly AttributeF Hit_Chance = new AttributeF(156, 0, -1, 0, 0, "", "", "Hit_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item = new AttributeF(157, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_Percent = new AttributeF(158, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_Subtotal = new AttributeF(159, 0, -1, 0, 0, "Attacks_Per_Second_Item * (1 + Attacks_Per_Second_Item_Percent)", "0", "Attacks_Per_Second_Item_Subtotal", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_Bonus = new AttributeF(160, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Item_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_Total = new AttributeF(161, 0, -1, 0, 0, "(Attacks_Per_Second_Item_Subtotal + Attacks_Per_Second_Item_Bonus)", "", "Attacks_Per_Second_Item_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Attacks_Per_Second = new AttributeF(162, 0, -1, 0, 0, "0", "", "Attacks_Per_Second", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Bonus = new AttributeF(163, 0, -1, 0, 0, "0", "", "Attacks_Per_Second_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Total = new AttributeF(164, 0, -1, 0, 0, "0", "Max(0.01, (((Attacks_Per_Second_Item_CurrentHand > 0.0) ? Attacks_Per_Second_Item_CurrentHand : Attacks_Per_Second) + Attacks_Per_Second_Bonus + Attacks_Per_Second_Item_Bonus) * Max(0.1, (1 + Attacks_Per_Second_Percent)))", "Attacks_Per_Second_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Attacks_Per_Second_Percent = new AttributeF(165, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF AI_Cooldown_Reduction_Percent = new AttributeF(166, 0, -1, 0, 0, "0", "", "AI_Cooldown_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Power_Cooldown_Reduction_Percent = new AttributeF(167, 0, -1, 0, 0, "0", "", "Power_Cooldown_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Damage_Delta = new AttributeF(168, 0, 0, 0, 0, "", "", "Damage_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Delta_Total = new AttributeF(169, 0, 0, 0, 0, "", "Max(Damage_Delta - Damage_Bonus_Min + Damage_Weapon_Delta_Total_CurrentHand, 0)", "Damage_Delta_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Min = new AttributeF(170, 0, 0, 0, 0, "", "", "Damage_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Bonus_Min = new AttributeF(171, 0, 0, 0, 0, "", "", "Damage_Bonus_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Min_Total = new AttributeF(172, 0, 0, 0, 0, "", "Damage_Min_Subtotal + Damage_Type_Percent_Bonus * Damage_Min_Subtotal#Physical", "Damage_Min_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Min_Subtotal = new AttributeF(173, 0, 0, 0, 0, "", "Damage_Min + Damage_Bonus_Min + Damage_Weapon_Min_Total_CurrentHand", "Damage_Min_Subtotal", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Percent_All_From_Skills = new AttributeF(174, 0, -1, 0, 0, "", "", "Damage_Percent_All_From_Skills", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Weapon_Delta = new AttributeF(175, 0, 0, 0, 0, "", "", "Damage_Weapon_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Delta_SubTotal = new AttributeF(176, 0, 0, 0, 0, "(Damage_Weapon_Delta > 0.0) ? (Max(1, Damage_Weapon_Delta - Damage_Weapon_Bonus_Min)) : Damage_Weapon_Delta", "", "Damage_Weapon_Delta_SubTotal", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Max = new AttributeF(177, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Delta)", "", "Damage_Weapon_Max", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Max_Total = new AttributeF(178, 0, 0, 0, 0, "(Damage_Weapon_Min_Total + Damage_Weapon_Delta_Total)", "", "Damage_Weapon_Max_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Max_Total_All = new AttributeF(179, 0, -1, 0, 0, "(Damage_Weapon_Max_Total#Physical + Damage_Weapon_Max_Total#Fire + Damage_Weapon_Max_Total#Cold + Damage_Weapon_Max_Total#Lightning + Damage_Weapon_Max_Total#Poison + Damage_Weapon_Max_Total#Arcane + Damage_Weapon_Max_Total#Holy)", "", "Damage_Weapon_Max_Total_All", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Delta_Total = new AttributeF(180, 0, 0, 0, 0, "Max((Damage_Weapon_Delta_SubTotal + Damage_Weapon_Bonus_Delta) * (1 + Damage_Weapon_Percent_Total), 0)", "", "Damage_Weapon_Delta_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Weapon_Delta_Total_All = new AttributeF(181, 0, -1, 0, 0, "(Damage_Weapon_Delta_Total#Physical + Damage_Weapon_Delta_Total#Fire + Damage_Weapon_Delta_Total#Cold + Damage_Weapon_Delta_Total#Lightning + Damage_Weapon_Delta_Total#Poison + Damage_Weapon_Delta_Total#Arcane + Damage_Weapon_Delta_Total#Holy)", "", "Damage_Weapon_Delta_Total_All", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Weapon_Bonus_Delta = new AttributeF(182, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Min = new AttributeF(183, 0, 0, 0, 0, "", "", "Damage_Weapon_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Min_Total = new AttributeF(184, 0, 0, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Bonus_Min) * (1 + Damage_Weapon_Percent_Total)", "", "Damage_Weapon_Min_Total", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Weapon_Min_Total_All = new AttributeF(185, 0, -1, 0, 0, "(Damage_Weapon_Min_Total#Physical + Damage_Weapon_Min_Total#Fire + Damage_Weapon_Min_Total#Cold + Damage_Weapon_Min_Total#Lightning + Damage_Weapon_Min_Total#Poison + Damage_Weapon_Min_Total#Arcane + Damage_Weapon_Min_Total#Holy)", "", "Damage_Weapon_Min_Total_All", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Weapon_Bonus_Min = new AttributeF(186, 0, 0, 0, 0, "", "", "Damage_Weapon_Bonus_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Percent_Bonus = new AttributeF(187, 0, 0, 0, 0, "", "", "Damage_Weapon_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Weapon_Percent_All = new AttributeF(188, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Weapon_Percent_Total = new AttributeF(189, 0, 0, 0, 0, "Damage_Weapon_Percent_Bonus + Damage_Weapon_Percent_All#NONE", "", "Damage_Weapon_Percent_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Type_Percent_Bonus = new AttributeF(190, 0, 0, 0, 0, "", "", "Damage_Type_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Percent_Bonus_Witchdoctor = new AttributeF(191, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Witchdoctor", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Percent_Bonus_Wizard = new AttributeF(192, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Wizard", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Crit_Percent_Base = new AttributeF(193, 0, -1, 0, 0, "", "", "Crit_Percent_Base", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Crit_Percent_Bonus_Capped = new AttributeF(194, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Capped", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Crit_Percent_Bonus_Uncapped = new AttributeF(195, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Uncapped", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Crit_Percent_Cap = new AttributeF(196, 0, -1, 0, 0, "", "", "Crit_Percent_Cap", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Crit_Damage_Percent = new AttributeF(197, 0, -1, 0, 0, "", "", "Crit_Damage_Percent", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeI Crit_Effect_Time = new AttributeI(198, 0, -1, 3, 1, "", "", "Crit_Effect_Time", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeF Pierce_Chance = new AttributeF(199, 0, -1, 0, 0, "", "", "Pierce_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Absorb_Percent = new AttributeF(200, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Reduction_Total = new AttributeF(201, 0, 0, 0, 0, "", "", "Damage_Reduction_Total", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Reduction_Current = new AttributeF(202, 0, 0, 0, 0, "", "", "Damage_Reduction_Current", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Damage_Reduction_Last_Tick = new AttributeI(203, 0, 0, 3, 1, "", "", "Damage_Reduction_Last_Tick", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeF Block_Chance = new AttributeF(204, 0, -1, 0, 0, "", "", "Block_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Block_Chance_Total = new AttributeF(205, 0, -1, 0, 0, "", "Block_Chance + Block_Chance_Item_Total", "Block_Chance_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Block_Chance_Bonus_Item = new AttributeF(206, 0, -1, 0, 0, "", "", "Block_Chance_Bonus_Item", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Block_Chance_Item = new AttributeF(207, 0, -1, 0, 0, "", "0", "Block_Chance_Item", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Block_Chance_Item_Total = new AttributeF(208, 0, -1, 0, 0, "Block_Chance_Item + Block_Chance_Bonus_Item", "", "Block_Chance_Item_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Block_Amount = new AttributeF(209, 0, -1, 0, 0, "", "", "Block_Amount", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Block_Amount_Bonus_Percent = new AttributeF(210, 0, -1, 0, 0, "", "", "Block_Amount_Bonus_Percent", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Block_Amount_Total_Min = new AttributeF(211, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Block_Amount_Total_Max = new AttributeF(212, 0, -1, 0, 0, "", "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Delta + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "Block_Amount_Total_Max", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Block_Amount_Item_Min = new AttributeF(213, 0, -1, 0, 0, "", "", "Block_Amount_Item_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Block_Amount_Item_Delta = new AttributeF(214, 0, -1, 0, 0, "", "", "Block_Amount_Item_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Block_Amount_Item_Bonus = new AttributeF(215, 0, -1, 0, 0, "", "", "Block_Amount_Item_Bonus", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Dodge_Chance_Bonus = new AttributeF(216, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Dodge_Chance_Bonus_Melee = new AttributeF(217, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Melee", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Dodge_Chance_Bonus_Ranged = new AttributeF(218, 0, -1, 7, 0, "", "", "Dodge_Chance_Bonus_Ranged", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Get_Hit_Current = new AttributeF(219, 0, -1, 0, 0, "", "", "Get_Hit_Current", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Max_Base = new AttributeF(220, 0, -1, 0, 0, "", "", "Get_Hit_Max_Base", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Max_Per_Level = new AttributeF(221, 0, -1, 0, 0, "", "", "Get_Hit_Max_Per_Level", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Max = new AttributeF(222, 0, -1, 0, 0, "", "Get_Hit_Max_Base + (Get_Hit_Max_Per_Level * Level)", "Get_Hit_Max", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Recovery_Base = new AttributeF(223, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Base", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Recovery_Per_Level = new AttributeF(224, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Per_Level", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Recovery = new AttributeF(225, 0, -1, 0, 0, "", "Get_Hit_Recovery_Base + (Get_Hit_Recovery_Per_Level * Level)", "Get_Hit_Recovery", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Damage = new AttributeF(226, 0, -1, 0, 0, "", "", "Get_Hit_Damage", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Get_Hit_Damage_Scalar = new AttributeF(227, 0, -1, 0, 0, "", "", "Get_Hit_Damage_Scalar", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeI Last_Damage_MainActor = new AttributeI(228, -1, -1, 3, 1, "", "", "Last_Damage_MainActor", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI AvailableStatsPoints = new AttributeI(229, -1, -1, 3, 1, "", "", "AvailableStatsPoints", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeB Ignores_Critical_Hits = new AttributeB(230, 0, -1, 1, 1, "", "", "Ignores_Critical_Hits", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Immunity = new AttributeB(231, 0, 0, 1, 1, "", "", "Immunity", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Untargetable = new AttributeB(232, 0, -1, 1, 1, "", "", "Untargetable", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Immobolize = new AttributeB(233, 0, -1, 1, 1, "", "", "Immobolize", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeB Immune_To_Knockback = new AttributeB(234, 0, -1, 1, 1, "", "", "Immune_To_Knockback", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Power_Immobilize = new AttributeB(235, 0, -1, 1, 1, "", "", "Power_Immobilize", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeF Stun_Chance = new AttributeF(236, 0, -1, 0, 0, "", "", "Stun_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Stun_Length = new AttributeF(237, 0, -1, 0, 0, "", "", "Stun_Length", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Stun_Recovery = new AttributeF(238, 0, -1, 0, 0, "", "", "Stun_Recovery", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Stun_Recovery_Speed = new AttributeF(239, 0, -1, 0, 0, "", "", "Stun_Recovery_Speed", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeB Stunned = new AttributeB(240, 0, -1, 1, 1, "", "", "Stunned", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Stun_Immune = new AttributeB(241, 0, -1, 1, 1, "", "", "Stun_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Poison_Length_Reduction = new AttributeF(242, 0, -1, 0, 0, "", "", "Poison_Length_Reduction", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeB Poisoned = new AttributeB(243, 0, -1, 1, 1, "", "", "Poisoned", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Bleeding = new AttributeB(244, 0, -1, 1, 1, "", "", "Bleeding", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF Bleed_Duration = new AttributeF(245, 0, -1, 0, 0, "", "", "Bleed_Duration", AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly AttributeB Chilled = new AttributeB(246, 0, -1, 1, 1, "", "", "Chilled", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF Freeze_Length_Reduction = new AttributeF(247, 0, -1, 0, 0, "", "", "Freeze_Length_Reduction", AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly AttributeB Freeze_Immune = new AttributeB(248, 0, -1, 1, 1, "", "", "Freeze_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Webbed = new AttributeB(249, 0, -1, 1, 1, "", "", "Webbed", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Slow = new AttributeB(250, 0, -1, 1, 1, "", "", "Slow", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB FireAura = new AttributeB(251, 0, -1, 1, 1, "", "", "FireAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB LightningAura = new AttributeB(252, 0, -1, 1, 1, "", "", "LightningAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB ColdAura = new AttributeB(253, 0, -1, 1, 1, "", "", "ColdAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB PoisonAura = new AttributeB(254, 0, -1, 1, 1, "", "", "PoisonAura", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Blind = new AttributeB(255, 0, -1, 1, 1, "", "", "Blind", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Enraged = new AttributeB(256, 0, -1, 1, 1, "", "", "Enraged", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Slowdown_Immune = new AttributeB(257, 0, -1, 1, 1, "", "", "Slowdown_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Gethit_Immune = new AttributeB(258, 0, -1, 1, 1, "", "", "Gethit_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Suffocation_Per_Second = new AttributeF(259, 0, -1, 0, 0, "", "", "Suffocation_Per_Second", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Suffocation_Unit_Value = new AttributeF(260, 0, -1, 1, 0, "", "", "Suffocation_Unit_Value", AttributeEncoding.Float16Or32, 1, 0, 0, 0);
        public static readonly AttributeF Thorns_Percent = new AttributeF(261, 0, 0, 0, 0, "", "", "Thorns_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Thorns_Percent_All = new AttributeF(262, 0, -1, 0, 0, "", "", "Thorns_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Thorns_Percent_Total = new AttributeF(263, 0, 0, 0, 0, "", "Thorns_Percent + Thorns_Percent_All#NONE", "Thorns_Percent_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Thorns_Fixed = new AttributeF(264, 0, 0, 0, 0, "", "", "Thorns_Fixed", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Steal_Health_Percent = new AttributeF(265, 0, -1, 0, 0, "", "", "Steal_Health_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Steal_Mana_Percent = new AttributeF(266, 0, -1, 0, 0, "", "", "Steal_Mana_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resource_On_Hit = new AttributeF(267, 0, 10, 0, 0, "", "", "Resource_On_Hit", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Resource_On_Kill = new AttributeF(268, 0, 10, 0, 0, "", "", "Resource_On_Kill", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Resource_On_Crit = new AttributeF(269, 0, 10, 0, 0, "", "", "Resource_On_Crit", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Hitpoints_On_Hit = new AttributeF(270, 0, -1, 0, 0, "", "", "Hitpoints_On_Hit", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Hitpoints_On_Kill = new AttributeF(271, 0, -1, 0, 0, "", "", "Hitpoints_On_Kill", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_To_Mana = new AttributeF(272, 0, -1, 0, 0, "", "", "Damage_To_Mana", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Last_Proc_Time = new AttributeI(273, 0, -1, 3, 1, "", "", "Last_Proc_Time", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Power_Delta = new AttributeF(274, 0, 0, 0, 0, "", "", "Damage_Power_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Power_Min = new AttributeF(275, 0, 0, 0, 0, "", "", "Damage_Power_Min", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Rope_Overlay = new AttributeI(276, -1, -1, 3, 1, "", "", "Rope_Overlay", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI General_Cooldown = new AttributeI(277, -1, -1, 3, 1, "", "", "General_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Power_Cooldown = new AttributeI(278, -1, 4, 1, 1, "", "", "Power_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Power_Cooldown_Start = new AttributeI(279, -1, 4, 1, 1, "", "", "Power_Cooldown_Start", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Proc_Cooldown = new AttributeI(280, 0, -1, 1, 1, "", "", "Proc_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Emote_Cooldown = new AttributeI(281, 0, -1, 1, 1, "", "", "Emote_Cooldown", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeF Projectile_Speed = new AttributeF(282, 0, -1, 0, 0, "", "", "Projectile_Speed", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Projectile_Speed_Increase_Percent = new AttributeF(283, 0, -1, 0, 0, "", "", "Projectile_Speed_Increase_Percent", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB Destroy_When_Path_Blocked = new AttributeB(284, 0, -1, 1, 1, "", "", "Destroy When Path Blocked", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Skill_Toggled_State = new AttributeB(285, 0, 4, 1, 1, "", "", "Skill_Toggled_State", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeI Act = new AttributeI(286, -1, -1, 3, 1, "", "", "Act", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeI Difficulty = new AttributeI(287, -1, -1, 3, 1, "", "", "Difficulty", AttributeEncoding.IntMinMax, 9, -1, 4, 3);
        public static readonly AttributeF Last_Damage_Amount = new AttributeF(288, -1, -1, 3, 0, "", "", "Last_Damage_Amount", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeB In_Knockback = new AttributeB(289, 0, -1, 1, 1, "", "", "In_Knockback", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Amplify_Damage_Type_Percent = new AttributeF(290, 0, 0, 0, 0, "", "", "Amplify_Damage_Type_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Amplify_Damage_Percent = new AttributeF(291, 0, -1, 0, 0, "", "", "Amplify_Damage_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Durability_Cur = new AttributeI(292, 0, -1, 0, 1, "", "", "Durability_Cur", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Durability_Max = new AttributeI(293, 0, -1, 0, 1, "", "", "Durability_Max", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Durability_Last_Damage = new AttributeI(294, 0, -1, 0, 1, "", "", "Durability_Last_Damage", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Item_Quality_Level = new AttributeI(295, -1, -1, 1, 1, "", "", "Item_Quality_Level", AttributeEncoding.IntMinMax, 8, -1, 11, 4);
        public static readonly AttributeF Item_Cost_Percent_Bonus = new AttributeF(296, 0, -1, 0, 0, "", "", "Item_Cost_Percent_Bonus", AttributeEncoding.Float16, 8, 0, 0, 16);
        public static readonly AttributeB Item_Equipped = new AttributeB(297, 0, -1, 1, 1, "", "", "Item_Equipped", AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly AttributeF Requirement = new AttributeF(298, 0, 1, 1, 0, "FLOOR(Requirement.Agg * (1 + Requirements_Ease_Percent#NONE))", "", "Requirement", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Requirements_Ease_Percent = new AttributeF(299, 0, -1, 0, 0, "", "0", "Requirements_Ease_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Requirement_When_Equipped = new AttributeF(300, 0, 1, 1, 0, "", "", "Requirement_When_Equipped", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI Sockets = new AttributeI(301, 0, -1, 0, 1, "", "0", "Sockets", AttributeEncoding.IntMinMax, 8, 0, 3, 2);
        public static readonly AttributeI Sockets_Filled = new AttributeI(302, 0, -1, 0, 1, "", "0", "Sockets_Filled", AttributeEncoding.IntMinMax, 8, 0, 3, 2);
        public static readonly AttributeF Stats_All_Bonus = new AttributeF(303, 0, -1, 0, 0, "", "", "Stats_All_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI Item_Bound_To_ACD = new AttributeI(304, -1, -1, 3, 1, "", "0", "Item_Bound_To_ACD", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Item_Locked_To_ACD = new AttributeI(305, -1, -1, 3, 1, "", "0", "Item_Locked_To_ACD", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Item_Binding_Level_Override = new AttributeI(306, 0, -1, 1, 1, "", "0", "Item_Binding_Level_Override", AttributeEncoding.IntMinMax, 8, 0, 5, 3);
        public static readonly AttributeI ItemStackQuantityHi = new AttributeI(307, 0, -1, 4, 1, "", "", "ItemStackQuantityHi", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI ItemStackQuantityLo = new AttributeI(308, 0, -1, 4, 1, "", "", "ItemStackQuantityLo", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeF Run_Speed_Granted = new AttributeF(309, 0, -1, 0, 0, "", "", "Run_Speed_Granted", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI Run_Speed_Duration = new AttributeI(310, 0, -1, 0, 1, "", "", "Run_Speed_Duration", AttributeEncoding.IntMinMax, 9, 0, 16777215, 24);
        public static readonly AttributeI IdentifyCost = new AttributeI(311, 0, -1, 0, 1, "", "", "IdentifyCost", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Seed = new AttributeI(312, 0, -1, 4, 1, "", "0", "Seed", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeB IsCrafted = new AttributeB(313, 0, -1, 4, 1, "", "0", "IsCrafted", AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly AttributeI DyeType = new AttributeI(314, 0, -1, 1, 1, "", "0", "DyeType", AttributeEncoding.IntMinMax, 8, -1, 30, 5);
        public static readonly AttributeI EnchantAffix = new AttributeI(315, -1, -1, 3, 1, "", "0", "EnchantAffix", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI EnchantRangeVal = new AttributeI(316, 0, -1, 4, 1, "", "0", "EnchantRangeVal", AttributeEncoding.IntMinMax, 8, 0, 255, 8);
        public static readonly AttributeI HighlySalvageable = new AttributeI(317, 0, -1, 1, 1, "", "0", "HighlySalvageable", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI ItemUnlockTimeHi = new AttributeI(318, 0, -1, 4, 1, "", "", "ItemUnlockTimeHi", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI ItemUnlockTimeLo = new AttributeI(319, 0, -1, 4, 1, "", "", "ItemUnlockTimeLo", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeB Always_Plays_GetHit = new AttributeB(320, 0, -1, 1, 1, "", "", "Always_Plays_GetHit", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Hidden = new AttributeB(321, 0, -1, 1, 1, "", "", "Hidden", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI RActor_Fade_Group = new AttributeI(322, -1, -1, 1, 1, "", "", "RActor_Fade_Group", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Quest_Range = new AttributeI(323, -1, -1, 3, 1, "", "", "Quest Range", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Attack_Cooldown_Min = new AttributeI(324, 0, -1, 0, 1, "", "", "Attack_Cooldown_Min", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Attack_Cooldown_Delta = new AttributeI(325, 0, -1, 0, 1, "", "", "Attack_Cooldown_Delta", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI InitialCooldownMinTotal = new AttributeI(326, 0, -1, 0, 1, "", "InitialCooldownMin / Attacks_Per_Second_Total", "InitialCooldownMinTotal", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI InitialCooldownDeltaTotal = new AttributeI(327, 0, -1, 0, 1, "", "InitialCooldownDelta / Attacks_Per_Second_Total", "InitialCooldownDeltaTotal", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Attack_Cooldown_Min_Total = new AttributeI(328, 0, -1, 0, 1, "", "Attack_Cooldown_Min / Attacks_Per_Second_Total", "Attack_Cooldown_Min_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Attack_Cooldown_Delta_Total = new AttributeI(329, 0, -1, 0, 1, "", "Attack_Cooldown_Delta / Attacks_Per_Second_Total", "Attack_Cooldown_Delta_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Closing_Cooldown_Min_Total = new AttributeI(330, 0, -1, 0, 1, "", "", "Closing_Cooldown_Min_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Closing_Cooldown_Delta_Total = new AttributeI(331, 0, -1, 0, 1, "", "", "Closing_Cooldown_Delta_Total", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeB Quest_Monster = new AttributeB(332, 0, -1, 0, 1, "", "", "Quest_Monster", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Quest_Monster_Effect = new AttributeI(333, -1, -1, 3, 1, "", "", "Quest_Monster Effect", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Treasure_Class = new AttributeI(334, -1, -1, 3, 1, "", "", "Treasure_Class", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Removes_Body_On_Death = new AttributeB(335, 0, -1, 1, 1, "", "", "Removes_Body_On_Death", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI InitialCooldownMin = new AttributeI(336, 0, -1, 0, 1, "", "", "InitialCooldownMin", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI InitialCooldownDelta = new AttributeI(337, 0, -1, 0, 1, "", "", "InitialCooldownDelta", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeF Knockback_Weight = new AttributeF(338, 0, -1, 0, 0, "", "", "Knockback_Weight", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeB UntargetableByPets = new AttributeB(339, 0, -1, 1, 1, "", "", "UntargetableByPets", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Damage_State_Current = new AttributeI(340, 0, -1, 0, 1, "", "", "Damage_State_Current", AttributeEncoding.IntMinMax, 31, 0, 15, 4);
        public static readonly AttributeI Damage_State_Max = new AttributeI(341, 0, -1, 0, 1, "", "", "Damage_State_Max", AttributeEncoding.IntMinMax, 31, 0, 15, 4);
        public static readonly AttributeB Is_Player_Decoy = new AttributeB(342, 0, -1, 1, 1, "", "", "Is_Player_Decoy", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF Custom_Target_Weight = new AttributeF(343, 0, 3, 0, 0, "", "", "Custom_Target_Weight", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Gizmo_State = new AttributeI(344, -1, -1, 3, 1, "", "", "Gizmo_State", AttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly AttributeI Gizmo_Charges = new AttributeI(345, 0, -1, 1, 1, "", "", "Gizmo_Charges", AttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly AttributeB Chest_Open = new AttributeB(346, 0, 3, 0, 1, "", "", "Chest_Open", AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly AttributeB Door_Locked = new AttributeB(347, 0, -1, 1, 1, "", "", "Door_Locked", AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly AttributeI Door_Timer = new AttributeI(348, -1, -1, 3, 1, "", "", "Door_Timer", AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly AttributeB Gizmo_Disabled_By_Script = new AttributeB(349, 0, -1, 1, 1, "", "", "Gizmo_Disabled_By_Script", AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly AttributeI Gizmo_Operator_ACDID = new AttributeI(350, -1, -1, 3, 1, "", "", "Gizmo_Operator_ACDID", AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly AttributeI Triggering_Count = new AttributeI(351, 0, -1, 0, 1, "", "", "Triggering_Count", AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly AttributeF Gate_Position = new AttributeF(352, 0, -1, 0, 0, "", "", "Gate_Position", AttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly AttributeF Gate_Velocity = new AttributeF(353, 0, -1, 0, 0, "", "", "Gate_Velocity", AttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly AttributeB Gizmo_Has_Been_Operated = new AttributeB(354, 0, -1, 1, 1, "", "", "Gizmo_Has_Been_Operated", AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly AttributeI Pet_Owner = new AttributeI(355, -1, -1, 3, 1, "", "", "Pet_Owner", AttributeEncoding.IntMinMax, 31, -1, 8, 4);
        public static readonly AttributeI Pet_Creator = new AttributeI(356, -1, -1, 3, 1, "", "", "Pet_Creator", AttributeEncoding.IntMinMax, 31, -1, 8, 4);
        public static readonly AttributeI Pet_Type = new AttributeI(357, -1, -1, 3, 1, "", "", "Pet_Type", AttributeEncoding.IntMinMax, 31, -1, 24, 5);
        public static readonly AttributeB DropsNoLoot = new AttributeB(358, 0, -1, 1, 1, "", "", "DropsNoLoot", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB GrantsNoXP = new AttributeB(359, 0, -1, 1, 1, "", "", "GrantsNoXP", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Hireling_Class = new AttributeI(360, 0, -1, 1, 1, "", "", "Hireling_Class", AttributeEncoding.IntMinMax, 31, 0, 4, 3);
        public static readonly AttributeI Summoned_By_SNO = new AttributeI(361, -1, -1, 3, 1, "", "", "Summoned_By_SNO", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Is_NPC = new AttributeB(362, 0, -1, 1, 1, "", "", "Is_NPC", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB NPC_Is_Operatable = new AttributeB(363, 0, -1, 1, 1, "", "", "NPC_Is_Operatable", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB NPC_Is_Escorting = new AttributeB(364, 0, -1, 1, 1, "", "", "NPC_Is_Escorting", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB NPC_Has_Interact_Options = new AttributeB(365, 0, 12, 1, 1, "", "", "NPC_Has_Interact_Options", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Conversation_Icon = new AttributeI(366, -1, 12, 3, 1, "", "", "Conversation_Icon", AttributeEncoding.IntMinMax, 31, -1, 6, 3);
        public static readonly AttributeI Callout_Cooldown = new AttributeI(367, -1, 16, 1, 1, "", "", "Callout_Cooldown", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Banter_Cooldown = new AttributeI(368, -1, 16, 1, 1, "", "", "Banter_Cooldown", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Conversation_Heard_Count = new AttributeI(369, 0, 16, 1, 1, "", "", "Conversation_Heard_Count", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Last_Tick_Shop_Entered = new AttributeI(370, -1, -1, 3, 1, "", "", "Last_Tick_Shop_Entered", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Is_Helper = new AttributeB(371, 0, -1, 1, 1, "", "", "Is_Helper", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Axe = new AttributeF(372, 0, -1, 0, 0, "", "", "Axe", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Axe2H = new AttributeF(373, 0, -1, 0, 0, "", "", "Axe2H", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF ThrowingAxe = new AttributeF(374, 0, -1, 0, 0, "", "", "ThrowingAxe", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF AxeAny = new AttributeF(375, 0, -1, 0, 0, "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "AxeAny", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Bow = new AttributeF(376, 0, -1, 0, 0, "", "", "Bow", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Crossbow = new AttributeF(377, 0, -1, 0, 0, "", "", "Crossbow", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF BowAny = new AttributeF(378, 0, -1, 0, 0, "Pin(Bow + Crossbow, 0, 1)", "Pin(Bow + Crossbow, 0, 1)", "BowAny", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Club = new AttributeF(379, 0, -1, 0, 0, "", "", "Club", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Club2H = new AttributeF(380, 0, -1, 0, 0, "", "", "Club2H", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF ClubAny = new AttributeF(381, 0, -1, 0, 0, "Pin(Club + Club2H, 0, 1)", "Pin(Club + Club2H, 0, 1)", "ClubAny", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Dagger = new AttributeF(382, 0, -1, 0, 0, "", "", "Dagger", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Mace = new AttributeF(383, 0, -1, 0, 0, "", "", "Mace", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Mace2H = new AttributeF(384, 0, -1, 0, 0, "", "", "Mace2H", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF MaceAny = new AttributeF(385, 0, -1, 0, 0, "Pin(Mace + Mace2H, 0, 1)", "Pin(Mace + Mace2H, 0, 1)", "MaceAny", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Sword = new AttributeF(386, 0, -1, 0, 0, "", "", "Sword", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Sword2H = new AttributeF(387, 0, -1, 0, 0, "", "", "Sword2H", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF SwordAny = new AttributeF(388, 0, -1, 0, 0, "Pin(Sword + Sword2H, 0, 1)", "Pin(Sword + Sword2H, 0, 1)", "SwordAny", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Polearm = new AttributeF(389, 0, -1, 0, 0, "", "", "Polearm", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Spear = new AttributeF(390, 0, -1, 0, 0, "", "", "Spear", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Wand = new AttributeF(391, 0, -1, 0, 0, "", "", "Wand", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF ColdStaff = new AttributeF(392, 0, -1, 0, 0, "", "", "ColdStaff", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF FireStaff = new AttributeF(393, 0, -1, 0, 0, "", "", "FireStaff", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF LightningStaff = new AttributeF(394, 0, -1, 0, 0, "", "", "LightningStaff", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF PoisonStaff = new AttributeF(395, 0, -1, 0, 0, "", "", "PoisonStaff", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF StaffAny = new AttributeF(396, 0, -1, 0, 0, "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "StaffAny", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Weapon1H = new AttributeF(397, 0, -1, 0, 0, "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "Weapon1H", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Weapon2H = new AttributeF(398, 0, -1, 0, 0, "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "Weapon2H", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF WeaponMelee = new AttributeF(399, 0, -1, 0, 0, "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "WeaponMelee", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF WeaponRanged = new AttributeF(400, 0, -1, 0, 0, "Pin(ThrowingAxe + BowAny, 0, 1)", "Pin(ThrowingAxe + BowAny, 0, 1)", "WeaponRanged", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Quiver = new AttributeF(401, 0, -1, 0, 0, "", "", "Quiver", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeI Reincarnation_Buff = new AttributeI(402, -1, -1, 3, 1, "", "", "Reincarnation_Buff", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Dead_Body_AnimTag = new AttributeI(403, -1, -1, 3, 1, "", "", "Dead_Body_AnimTag", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Spawned_by_ACDID = new AttributeI(404, -1, -1, 3, 1, "", "", "Spawned_by_ACDID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Summoned_By_ACDID = new AttributeI(405, -1, -1, 3, 1, "", "", "Summoned_By_ACDID", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Summoner_ID = new AttributeI(406, -1, -1, 3, 1, "", "", "Summoner_ID", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Banner_ACDID = new AttributeI(407, -1, -1, 3, 1, "", "", "Banner_ACDID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Breakable_Shield_HP = new AttributeF(408, 0, -1, 0, 0, "", "", "Breakable_Shield_HP", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeI Current_WeaponClass = new AttributeI(409, -1, -1, 3, 1, "", "", "Current_WeaponClass", AttributeEncoding.IntMinMax, 31, -1, 19, 5);
        public static readonly AttributeB Weapons_Sheathed = new AttributeB(410, 0, -1, 1, 1, "", "", "Weapons_Sheathed", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Held_In_OffHand = new AttributeB(411, 0, -1, 1, 1, "", "0", "Held_In_OffHand", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF Attacks_Per_Second_Item_MainHand = new AttributeF(412, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Attacks_Per_Second_Item_Subtotal )", "", "Attacks_Per_Second_Item_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_OffHand = new AttributeF(413, 0, -1, 0, 0, "(Held_In_OffHand ? Attacks_Per_Second_Item_Subtotal : 0)", "", "Attacks_Per_Second_Item_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_Total_MainHand = new AttributeF(414, 0, -1, 0, 0, "Attacks_Per_Second_Item_MainHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Attacks_Per_Second_Item_Total_OffHand = new AttributeF(415, 0, -1, 0, 0, "Attacks_Per_Second_Item_OffHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Weapon_Min_Total_MainHand = new AttributeF(416, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Min_Total )", "", "Damage_Weapon_Min_Total_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Min_Total_OffHand = new AttributeF(417, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Min_Total : 0)", "", "Damage_Weapon_Min_Total_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Delta_Total_MainHand = new AttributeF(418, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Delta_Total )", "", "Damage_Weapon_Delta_Total_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Delta_Total_OffHand = new AttributeF(419, 0, 0, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Delta_Total : 0)", "", "Damage_Weapon_Delta_Total_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Attacks_Per_Second_Item_CurrentHand = new AttributeF(420, 0, -1, 0, 0, "", "(DualWield_Hand ? Attacks_Per_Second_Item_OffHand : Attacks_Per_Second_Item_MainHand)", "Attacks_Per_Second_Item_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Weapon_Min_Total_CurrentHand = new AttributeF(421, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Min_Total_OffHand : Damage_Weapon_Min_Total_MainHand)", "Damage_Weapon_Min_Total_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Weapon_Delta_Total_CurrentHand = new AttributeF(422, 0, 0, 0, 0, "", "(DualWield_Hand#NONE ? Damage_Weapon_Delta_Total_OffHand : Damage_Weapon_Delta_Total_MainHand)", "Damage_Weapon_Delta_Total_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeI Has_Special_Death_AnimTag = new AttributeI(423, -1, -1, 1, 1, "", "", "Has_Special_Death_AnimTag", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Death_Type_Override = new AttributeI(424, -1, -1, 3, 1, "", "", "Death_Type_Override", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB In_Combat = new AttributeB(425, 0, -1, 1, 1, "", "", "In_Combat", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeB In_Conversation = new AttributeB(426, 0, -1, 3, 1, "", "", "In_Conversation", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Last_Tick_Potion_Used = new AttributeI(427, -1, -1, 3, 1, "", "", "Last_Tick_Potion_Used", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Potion_Dilution_Percent = new AttributeF(428, 0, -1, 0, 0, "", "", "Potion_Dilution_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Out_Of_Combat_Health_Regen_Percent = new AttributeF(429, 0, -1, 0, 0, "", "", "Out_Of_Combat_Health_Regen_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Out_Of_Combat_Mana_Regen_Percent = new AttributeF(430, 0, -1, 0, 0, "", "", "Out_Of_Combat_Mana_Regen_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Potion_Dilution_Duration = new AttributeI(431, -1, -1, 3, 1, "", "", "Potion_Dilution_Duration", AttributeEncoding.IntMinMax, 0, -1, 16777214, 24);
        public static readonly AttributeF Potion_Dilution_Scalar = new AttributeF(432, 0, -1, 0, 0, "", "", "Potion_Dilution_Scalar", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeB Feared = new AttributeB(433, 0, -1, 1, 1, "", "", "Feared", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Fear_Immune = new AttributeB(434, 0, -1, 1, 1, "", "", "Fear_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Last_Damage_ACD = new AttributeI(435, -1, -1, 3, 1, "", "", "Last_Damage_ACD", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Attached_To_ACD = new AttributeI(436, -1, -1, 3, 1, "", "", "Attached_To_ACD", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Attachment_ACD = new AttributeI(437, -1, -1, 3, 1, "", "", "Attachment_ACD", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Normal_Attack_Replacement_Power_SNO = new AttributeI(438, -1, -1, 3, 1, "", "", "Normal_Attack_Replacement_Power_SNO", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeF Damage_Type_Override = new AttributeF(439, 0, 0, 0, 0, "", "", "Damage_Type_Override", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeF Minion_Count_Bonus_Percent = new AttributeF(440, 0, -1, 0, 0, "", "", "Minion_Count_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Champion_Teleport_Next_Tick = new AttributeI(441, 0, -1, 0, 1, "", "", "Champion_Teleport_Next_Tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Champion_Teleport_Time_Min_In_Seconds = new AttributeF(442, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Teleport_Time_Delta_In_Seconds = new AttributeF(443, 0, -1, 0, 0, "", "", "Champion_Teleport_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Champion_Clone_Next_Tick = new AttributeI(444, 0, -1, 0, 1, "", "", "Champion_Clone_Next_Tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Champion_Clone_Time_Min_In_Seconds = new AttributeF(445, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Clone_Time_Delta_In_Seconds = new AttributeF(446, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Clone_Hitpoint_Bonus_Percent = new AttributeF(447, 0, -1, 0, 0, "", "", "Champion_Clone_Hitpoint_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Clone_Damage_Bonus_Percent = new AttributeF(448, 0, -1, 0, 0, "", "", "Champion_Clone_Damage_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Champion_Ghostly_Next_Tick = new AttributeI(449, 0, -1, 0, 1, "", "", "Champion_Ghostly_Next_Tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Champion_Ghostly_Inactive_Time_Min_In_Seconds = new AttributeF(450, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Ghostly_Inactive_Time_Delta_In_Seconds = new AttributeF(451, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Ghostly_Active_Time_Min_In_Seconds = new AttributeF(452, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Min_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Ghostly_Active_Time_Delta_In_Seconds = new AttributeF(453, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Delta_In_Seconds", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Champion_Ghostly_Saved_Dodge_Chance = new AttributeF(454, 0, -1, 0, 0, "", "", "Champion_Ghostly_Saved_Dodge_Chance", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeB Champion_Ghostly = new AttributeB(455, 0, -1, 1, 1, "", "", "Champion_Ghostly", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Base_Element = new AttributeI(456, -1, -1, 1, 1, "", "", "Base_Element", AttributeEncoding.IntMinMax, 0, -1, 7, 4);
        public static readonly AttributeF Projectile_Amount_Bonus_Percent = new AttributeF(457, 0, -1, 0, 0, "", "", "Projectile_Amount_Bonus_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Projectile_Reflect_Chance = new AttributeF(458, 0, 0, 0, 0, "", "", "Projectile_Reflect_Chance", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Attack_Fear_Chance = new AttributeF(459, 0, -1, 0, 0, "", "", "Attack_Fear_Chance", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Attack_Fear_Time_Min = new AttributeF(460, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Min", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Attack_Fear_Time_Delta = new AttributeF(461, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Delta", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeB Buff_Visual_Effect = new AttributeB(462, 0, 9, 1, 1, "", "", "Buff_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Buff_Icon_Start_Tick0 = new AttributeI(463, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick0", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick1 = new AttributeI(464, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick1", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick2 = new AttributeI(465, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick2", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick3 = new AttributeI(466, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick3", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick4 = new AttributeI(467, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick4", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick5 = new AttributeI(468, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick5", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick6 = new AttributeI(469, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick6", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_Start_Tick7 = new AttributeI(470, 0, 4, 1, 1, "", "", "Buff_Icon_Start_Tick7", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick0 = new AttributeI(471, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick0", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick1 = new AttributeI(472, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick1", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick2 = new AttributeI(473, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick2", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick3 = new AttributeI(474, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick3", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick4 = new AttributeI(475, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick4", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick5 = new AttributeI(476, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick5", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick6 = new AttributeI(477, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick6", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Buff_Icon_End_Tick7 = new AttributeI(478, 0, 4, 1, 1, "", "", "Buff_Icon_End_Tick7", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB Could_Have_Ragdolled = new AttributeB(479, 0, -1, 1, 1, "", "", "Could_Have_Ragdolled", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Ambient_Damage_Effect_Last_Time = new AttributeI(480, 0, -1, 1, 1, "", "", "Ambient_Damage_Effect_Last_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Scale_Bonus = new AttributeF(481, 0, -1, 0, 0, "", "", "Scale_Bonus", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB Deleted_On_Server = new AttributeB(482, 0, -1, 1, 1, "", "", "Deleted_On_Server", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Scripted_Fade_Time = new AttributeI(483, 0, -1, 1, 1, "", "", "Scripted_Fade_Time", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB Does_No_Damage = new AttributeB(484, 0, -1, 1, 1, "", "", "Does_No_Damage", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Does_Fake_Damage = new AttributeB(485, 0, -1, 1, 1, "", "", "Does_Fake_Damage", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF SlowTime_Debuff = new AttributeF(486, 0, -1, 0, 0, "", "", "SlowTime_Debuff", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB Blocks_Projectiles = new AttributeB(487, 0, -1, 1, 1, "", "", "Blocks_Projectiles", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Frozen = new AttributeB(488, 0, -1, 1, 1, "", "", "Frozen", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF Freeze_Damage_Percent_Bonus = new AttributeF(489, 0, -1, 0, 0, "", "", "Freeze_Damage_Percent_Bonus", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeB Buff_Active = new AttributeB(490, 0, 4, 1, 1, "", "", "Buff_Active", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeF DualWield_BothAttack_Chance = new AttributeF(491, 0, -1, 0, 0, "", "", "DualWield_BothAttack_Chance", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Summon_Expiration_Tick = new AttributeI(492, 0, -1, 0, 1, "", "", "Summon_Expiration_Tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Summon_Count = new AttributeI(493, 0, -1, 0, 1, "", "", "Summon_Count", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Uninterruptible = new AttributeB(494, 0, -1, 1, 1, "", "", "Uninterruptible", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Queue_Death = new AttributeB(495, 0, -1, 1, 1, "", "", "Queue Death", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB CantStartDisplayedPowers = new AttributeB(496, 0, -1, 1, 1, "", "", "CantStartDisplayedPowers", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Wizard_Slowtime_Proxy_ACD = new AttributeI(497, -1, -1, 3, 1, "", "", "Wizard_Slowtime_Proxy_ACD", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF DPS = new AttributeF(498, 0, -1, 1, 0, "", "", "DPS", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeI Resurrection_Power = new AttributeI(499, -1, -1, 3, 1, "", "", "Resurrection_Power", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Freeze_Damage = new AttributeF(500, 0, -1, 1, 0, "", "", "Freeze_Damage", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF Freeze_Capacity = new AttributeF(501, 0, -1, 0, 0, "", "", "Freeze_Capacity", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeF Thaw_Rate = new AttributeF(502, 0, -1, 0, 0, "", "", "Thaw_Rate", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeF Chilled_Dur_Bonus_Percent = new AttributeF(503, 0, -1, 0, 0, "", "", "Chilled_Dur_Bonus_Percent", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeF DOT_DPS = new AttributeF(504, 0, -1, 0, 0, "", "", "DOT_DPS", AttributeEncoding.Float16Or32, 31, 0, 0, 0);
        public static readonly AttributeF DamageCap_Percent = new AttributeF(505, 0, -1, 1, 0, "", "", "DamageCap_Percent", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeI Item_Time_Sold = new AttributeI(506, 0, -1, 1, 1, "", "", "Item_Time_Sold", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Forced_Hireling_Power = new AttributeI(507, -1, -1, 3, 1, "", "", "Forced_Hireling_Power", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB IsRooted = new AttributeB(508, 0, -1, 1, 1, "", "", "IsRooted", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI RootTargetACD = new AttributeI(509, -1, -1, 3, 1, "", "", "RootTargetACD", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF RootAutoDecayPerSecond = new AttributeF(510, 0, -1, 1, 0, "", "", "RootAutoDecayPerSecond", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF RootUnitValue = new AttributeF(511, 0, -1, 1, 0, "", "", "RootUnitValue", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeI RootTotalTicks = new AttributeI(512, 0, -1, 1, 1, "", "", "RootTotalTicks", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Hide_Affixes = new AttributeB(513, 0, -1, 1, 1, "", "", "Hide_Affixes", AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly AttributeI Rune_A = new AttributeI(514, 0, 11, 0, 1, "", "", "Rune_A", AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly AttributeI Rune_B = new AttributeI(515, 0, 11, 0, 1, "", "", "Rune_B", AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly AttributeI Rune_C = new AttributeI(516, 0, 11, 0, 1, "", "", "Rune_C", AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly AttributeI Rune_D = new AttributeI(517, 0, 11, 0, 1, "", "", "Rune_D", AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly AttributeI Rune_E = new AttributeI(518, 0, 11, 0, 1, "", "", "Rune_E", AttributeEncoding.IntMinMax, 31, 0, 255, 8);
        public static readonly AttributeF Resistance_Stun = new AttributeF(519, 0, -1, 0, 0, "", "", "Resistance_Stun", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Stun_Total = new AttributeF(520, 0, -1, 0, 0, "", "Resistance_Stun + Resistance_StunRootFreeze", "Resistance_Stun_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Root = new AttributeF(521, 0, -1, 0, 0, "", "", "Resistance_Root", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Root_Total = new AttributeF(522, 0, -1, 0, 0, "", "Resistance_Root + Resistance_StunRootFreeze", "Resistance_Root_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Freeze = new AttributeF(523, 0, -1, 0, 0, "", "", "Resistance_Freeze", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Freeze_Total = new AttributeF(524, 0, -1, 0, 0, "", "Resistance_Freeze + Resistance_StunRootFreeze", "Resistance_Freeze_Total", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_StunRootFreeze = new AttributeF(525, 0, -1, 0, 0, "", "", "Resistance_StunRootFreeze", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF CrowdControl_Reduction = new AttributeF(526, 0, -1, 7, 0, "", "", "CrowdControl_Reduction", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeB Displays_Team_Effect = new AttributeB(527, 0, -1, 1, 1, "", "", "Displays_Team_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Cannot_Be_Added_To_AI_Target_List = new AttributeB(528, 0, -1, 1, 1, "", "", "Cannot_Be_Added_To_AI_Target_List", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI SkillKit = new AttributeI(529, -1, -1, 3, 1, "", "", "SkillKit", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeB Immune_To_Charm = new AttributeB(530, 0, -1, 1, 1, "", "", "Immune_To_Charm", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Immune_To_Blind = new AttributeB(531, 0, -1, 1, 1, "", "", "Immune_To_Blind", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Damage_Shield = new AttributeB(532, 0, -1, 1, 1, "", "", "Damage_Shield", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Silenced = new AttributeB(533, 0, -1, 1, 1, "", "", "Silenced", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Diseased = new AttributeB(534, 0, -1, 1, 1, "", "", "Diseased", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Guard_Object_ACDID = new AttributeI(535, -1, -1, 3, 1, "", "", "Guard_Object_ACDID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Follow_Target_ACDID = new AttributeI(536, -1, -1, 3, 1, "", "", "Follow_Target_ACDID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Follow_Target_Type = new AttributeI(537, 0, -1, 3, 1, "", "", "Follow_Target_Type", AttributeEncoding.IntMinMax, 0, 0, 2, 2);
        public static readonly AttributeI Forced_Enemy_ACDID = new AttributeI(538, -1, -1, 1, 1, "", "", "Forced_Enemy_ACDID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI NPC_Talk_Target_ANN = new AttributeI(539, -1, -1, 3, 1, "", "", "NPC_Talk_Target_ANN", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI NPC_Conv_Target_ANN = new AttributeI(540, -1, -1, 3, 1, "", "", "NPC_Conv_Target_ANN", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Script_Target_ACDID = new AttributeI(541, -1, 3, 3, 1, "", "", "Script_Target_ACDID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Look_Target_Server_ANN = new AttributeI(542, -1, -1, 1, 1, "", "", "Look_Target_Server_ANN", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF Look_Target_Broadcast_Intensity = new AttributeF(543, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Intensity", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Look_Target_Broadcast_Radius = new AttributeF(544, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Radius", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB Stealthed = new AttributeB(545, 0, -1, 1, 1, "", "", "Stealthed", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI GemQuality = new AttributeI(546, 0, -1, 4, 1, "", "", "GemQuality", AttributeEncoding.IntMinMax, 8, 0, 14, 4);
        public static readonly AttributeI ItemBuffIcon = new AttributeI(547, 0, 4, 1, 1, "", "0", "ItemBuffIcon", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF ScrollDuration = new AttributeF(548, 0, -1, 1, 0, "", "0", "ScrollDuration", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Gizmo_Actor_SNO_To_Spawn = new AttributeI(549, -1, -1, 3, 1, "", "", "Gizmo_Actor_SNO_To_Spawn", AttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly AttributeF Gizmo_Actor_To_Spawn_Scale = new AttributeF(550, 0, -1, 1, 0, "", "", "Gizmo_Actor_To_Spawn_Scale", AttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly AttributeI Death_Replacement_Power_SNO = new AttributeI(551, -1, -1, 3, 1, "", "", "Death_Replacement_Power_SNO", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Attachment_Handled_By_Client = new AttributeB(552, 0, -1, 1, 1, "", "", "Attachment_Handled_By_Client", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB AI_In_Special_State = new AttributeB(553, 0, -1, 1, 1, "", "", "AI_In_Special_State", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB AI_Used_Scripted_Spawn_Anim = new AttributeB(554, 0, -1, 1, 1, "", "", "AI_Used_Scripted_Spawn_Anim", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB AI_Spawned_By_Inactive_Marker = new AttributeB(555, 0, -1, 1, 1, "", "", "AI_Spawned_By_Inactive_Marker", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Headstone_Player_ANN = new AttributeI(556, -1, -1, 3, 1, "", "", "Headstone_Player_ANN", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF Resource_Cost_Reduction_Percent = new AttributeF(557, 0, 10, 0, 0, "", "", "Resource_Cost_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Resistance_Penetration = new AttributeF(558, 0, 0, 0, 0, "", "", "Resistance_Penetration", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Resistance_Penetration_Total = new AttributeF(559, 0, 0, 0, 0, "", "(Resistance_Penetration + Resistance_Penetration_All#NONE) * (Resistance_Penetration_Percent_All#NONE + 1)", "Resistance_Penetration_Total", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Resistance_Penetration_All = new AttributeF(560, 0, -1, 0, 0, "", "", "Resistance_Penetration_All", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Resistance_Penetration_Percent_All = new AttributeF(561, 0, -1, 0, 0, "", "", "Resistance_Penetration_Percent_All", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Fury_Effect_Level = new AttributeI(562, 0, -1, 0, 1, "", "", "Fury_Effect_Level", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF Health_Potion_Bonus_Heal_Percent = new AttributeF(563, 0, -1, 0, 0, "", "", "Health_Potion_Bonus_Heal_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Free_Cast = new AttributeI(564, 0, 4, 1, 1, "", "", "Free_Cast", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeB Free_Cast_All = new AttributeB(565, 0, -1, 1, 1, "", "", "Free_Cast_All", AttributeEncoding.IntMinMax, 9, 0, 1, 1);
        public static readonly AttributeF Movement_Scalar_Reduction_Percent = new AttributeF(566, 0, -1, 1, 0, "", "", "Movement_Scalar_Reduction_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Movement_Scalar_Reduction_Resistance = new AttributeF(567, 0, -1, 0, 0, "", "", "Movement_Scalar_Reduction_Resistance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Absorb_Percent_All = new AttributeF(568, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent_All", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI World_Seed = new AttributeI(569, 0, -1, 0, 1, "", "", "World_Seed", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Kill_Count_Record = new AttributeI(570, 0, -1, 1, 1, "", "", "Kill_Count_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Object_Destruction_Record = new AttributeI(571, 0, -1, 1, 1, "", "", "Object_Destruction_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Single_Attack_Record = new AttributeI(572, 0, -1, 1, 1, "", "", "Single_Attack_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeI Environment_Attack_Record = new AttributeI(573, 0, -1, 1, 1, "", "", "Environment_Attack_Record", AttributeEncoding.IntMinMax, 0, 0, 16777215, 24);
        public static readonly AttributeB Root_Immune = new AttributeB(574, 0, -1, 1, 1, "", "", "Root_Immune", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Monster_Play_Get_Hit_Bonus = new AttributeF(575, 0, -1, 0, 0, "", "", "Monster_Play_Get_Hit_Bonus", AttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly AttributeI Stored_Contact_Frame = new AttributeI(576, 0, -1, 1, 1, "", "", "Stored_Contact_Frame", AttributeEncoding.IntMinMax, 0, 0, 4, 3);
        public static readonly AttributeI Buff_Icon_Count0 = new AttributeI(577, 0, 4, 0, 1, "", "", "Buff_Icon_Count0", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count1 = new AttributeI(578, 0, 4, 0, 1, "", "", "Buff_Icon_Count1", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count2 = new AttributeI(579, 0, 4, 0, 1, "", "", "Buff_Icon_Count2", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count3 = new AttributeI(580, 0, 4, 0, 1, "", "", "Buff_Icon_Count3", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count4 = new AttributeI(581, 0, 4, 0, 1, "", "", "Buff_Icon_Count4", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count5 = new AttributeI(582, 0, 4, 0, 1, "", "", "Buff_Icon_Count5", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count6 = new AttributeI(583, 0, 4, 0, 1, "", "", "Buff_Icon_Count6", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeI Buff_Icon_Count7 = new AttributeI(584, 0, 4, 0, 1, "", "", "Buff_Icon_Count7", AttributeEncoding.IntMinMax, 31, 0, 16777215, 24);
        public static readonly AttributeB Observer = new AttributeB(585, 0, -1, 1, 1, "", "", "Observer", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Resurrect_As_Observer = new AttributeB(586, 0, -1, 1, 1, "", "", "Resurrect_As_Observer", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Combo_Level = new AttributeI(587, 0, -1, 1, 1, "", "", "Combo_Level", AttributeEncoding.IntMinMax, 0, 0, 3, 2);
        public static readonly AttributeI Combo_Time_Last_Move = new AttributeI(588, 0, -1, 1, 1, "", "", "Combo_Time_Last_Move", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Burrowed = new AttributeB(589, 0, -1, 1, 1, "", "", "Burrowed", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Death_Replacement_Effect_Group_SNO = new AttributeI(590, -1, -1, 3, 1, "", "", "Death_Replacement_Effect_Group_SNO", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Checkpoint_Resurrection_Allowed_Game_Time = new AttributeI(591, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Allowed_Game_Time", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Checkpoint_Resurrection_Forced_Game_Time = new AttributeI(592, 0, -1, 0, 1, "", "", "Checkpoint_Resurrection_Forced_Game_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Controlling_TimedEvent_SNO = new AttributeI(593, -1, -1, 3, 1, "", "", "Controlling_TimedEvent_SNO", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Casting_Speed_Percent = new AttributeF(594, 0, -1, 0, 0, "", "", "Casting_Speed_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeB Using_Bossbar = new AttributeB(595, 0, -1, 1, 1, "", "", "Using_Bossbar", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect = new AttributeB(596, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect = new AttributeB(597, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect = new AttributeB(598, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect = new AttributeB(599, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect = new AttributeB(600, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect = new AttributeB(601, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect = new AttributeB(602, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect = new AttributeB(603, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Store_SNO = new AttributeI(604, 0, 0, 3, 1, "", "", "Store SNO", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB Busy = new AttributeB(605, 0, -1, 1, 1, "", "", "Busy", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Afk = new AttributeB(606, 0, -1, 1, 1, "", "", "Afk", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Last_Action_Timestamp = new AttributeI(607, 0, -1, 1, 1, "", "", "Last Action Timestamp", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Portal_Next_Time = new AttributeI(608, 0, -1, 1, 1, "", "", "Portal Next Time", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeF Repair_Discount_Percent = new AttributeF(609, 0, -1, 0, 0, "", "", "Repair_Discount_Percent", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB Resource_Degeneration_Prevented = new AttributeB(610, 0, -1, 1, 1, "", "", "Resource_Degeneration_Prevented", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Operatable = new AttributeB(611, 0, -1, 4, 1, "", "", "Operatable", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Look_Override = new AttributeI(612, 0, -1, 0, 1, "", "", "Look_Override", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Spawner_Concurrent_Count_ID = new AttributeI(613, -1, -1, 3, 1, "", "", "Spawner_Concurrent_Count_ID", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Disabled = new AttributeB(614, 0, -1, 1, 1, "", "", "Disabled", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Skill_Override = new AttributeI(615, -1, 3, 1, 1, "", "", "Skill_Override", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB Skill_Override_Active = new AttributeB(616, 0, -1, 1, 1, "", "", "Skill_Override_Active", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Skill_Override_Ended = new AttributeB(617, 0, 4, 1, 1, "", "", "Skill_Override_Ended", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Skill_Override_Ended_Active = new AttributeB(618, 0, -1, 1, 1, "", "", "Skill_Override_Ended_Active", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Is_Power_Proxy = new AttributeB(619, 0, -1, 1, 1, "", "", "Is_Power_Proxy", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Force_No_Death_Animation = new AttributeB(620, 0, -1, 1, 1, "", "", "Force_No_Death_Animation", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Player_WeaponClass_Anim_Override = new AttributeI(621, -1, -1, 1, 1, "", "", "Player_WeaponClass_Anim_Override", AttributeEncoding.IntMinMax, 31, -1, 19, 5);
        public static readonly AttributeB Operatable_Story_Gizmo = new AttributeB(622, 0, -1, 1, 1, "", "", "Operatable_Story_Gizmo", AttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect_None = new AttributeB(623, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect_A = new AttributeB(624, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect_B = new AttributeB(625, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect_C = new AttributeB(626, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect_D = new AttributeB(627, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_0_Visual_Effect_E = new AttributeB(628, 0, 4, 1, 1, "", "", "Power_Buff_0_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect_None = new AttributeB(629, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect_A = new AttributeB(630, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect_B = new AttributeB(631, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect_C = new AttributeB(632, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect_D = new AttributeB(633, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_1_Visual_Effect_E = new AttributeB(634, 0, 4, 1, 1, "", "", "Power_Buff_1_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect_None = new AttributeB(635, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect_A = new AttributeB(636, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect_B = new AttributeB(637, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect_C = new AttributeB(638, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect_D = new AttributeB(639, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_2_Visual_Effect_E = new AttributeB(640, 0, 4, 1, 1, "", "", "Power_Buff_2_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect_None = new AttributeB(641, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect_A = new AttributeB(642, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect_B = new AttributeB(643, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect_C = new AttributeB(644, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect_D = new AttributeB(645, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_3_Visual_Effect_E = new AttributeB(646, 0, 4, 1, 1, "", "", "Power_Buff_3_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect_None = new AttributeB(647, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect_A = new AttributeB(648, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect_B = new AttributeB(649, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect_C = new AttributeB(650, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect_D = new AttributeB(651, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_4_Visual_Effect_E = new AttributeB(652, 0, 4, 1, 1, "", "", "Power_Buff_4_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect_None = new AttributeB(653, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect_A = new AttributeB(654, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect_B = new AttributeB(655, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect_C = new AttributeB(656, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect_D = new AttributeB(657, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_5_Visual_Effect_E = new AttributeB(658, 0, 4, 1, 1, "", "", "Power_Buff_5_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect_None = new AttributeB(659, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect_A = new AttributeB(660, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect_B = new AttributeB(661, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect_C = new AttributeB(662, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect_D = new AttributeB(663, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_6_Visual_Effect_E = new AttributeB(664, 0, 4, 1, 1, "", "", "Power_Buff_6_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect_None = new AttributeB(665, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_None", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect_A = new AttributeB(666, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_A", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect_B = new AttributeB(667, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_B", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect_C = new AttributeB(668, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_C", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect_D = new AttributeB(669, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_D", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Power_Buff_7_Visual_Effect_E = new AttributeB(670, 0, 4, 1, 1, "", "", "Power_Buff_7_Visual_Effect_E", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Walk_Passability_Power_SNO = new AttributeI(671, -1, -1, 1, 1, "", "", "Walk_Passability_Power_SNO", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Passability_Power_SNO = new AttributeI(672, -1, -1, 1, 1, "", "", "Passability_Power_SNO", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Flippy_ID = new AttributeI(673, -1, -1, 3, 1, "", "", "Flippy_ID", AttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly AttributeI Summoning_Machine_Num_Casters = new AttributeI(674, 0, -1, 0, 1, "", "", "Summoning_Machine_Num_Casters", AttributeEncoding.IntMinMax, 0, 0, 255, 8);
        public static readonly AttributeI Summoning_Machine_Spawn_Count = new AttributeI(675, 0, 15, 0, 1, "", "", "Summoning_Machine_Spawn_Count", AttributeEncoding.IntMinMax, 0, 0, 4095, 12);
        public static readonly AttributeI Summoning_Machine_Next_Spawn_Ticks = new AttributeI(676, 0, -1, 0, 1, "", "", "Summoning_Machine_Next_Spawn_Ticks", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Summoning_Machine_Spawn_Team = new AttributeI(677, -1, -1, 1, 1, "", "", "Summoning_Machine_Spawn_Team", AttributeEncoding.IntMinMax, 0, -1, 23, 5);
        public static readonly AttributeF Screen_Attack_Radius_Constant = new AttributeF(678, 1114636288, -1, 3, 0, "", "", "Screen_Attack_Radius_Constant", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeF Damage_Done_Reduction_Percent = new AttributeF(679, 0, -1, 1, 0, "", "", "Damage_Done_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeI Set_Item_Count = new AttributeI(680, 0, 17, 0, 1, "", "", "Set_Item_Count", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF Spawner_Countdown_Percent = new AttributeF(681, 0, -1, 1, 0, "", "", "Spawner_Countdown_Percent", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB Attack_Slow = new AttributeB(682, 0, -1, 1, 1, "", "", "Attack_Slow", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Power_Disabled = new AttributeB(683, 0, 4, 1, 1, "", "", "Power_Disabled", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Weapon_Effect_Override = new AttributeI(684, 0, -1, 1, 1, "", "", "Weapon_Effect_Override", AttributeEncoding.IntMinMax, 31, 0, 14, 4);
        public static readonly AttributeF Debuff_Duration_Reduction_Percent = new AttributeF(685, 0, -1, 0, 0, "", "", "Debuff_Duration_Reduction_Percent", AttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly AttributeB Uses_PvP_Power_Tags = new AttributeB(686, 0, -1, 1, 1, "", "", "Uses_PvP_Power_Tags", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Trait = new AttributeI(687, 0, 4, 1, 1, "", "", "Trait", AttributeEncoding.IntMinMax, 31, -1, 30, 5);
        public static readonly AttributeI Last_ACD_Attacked_By = new AttributeI(688, -1, -1, 3, 1, "", "", "Last_ACD_Attacked_By", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF Gold_PickUp_Radius = new AttributeF(689, 0, -1, 0, 0, "", "", "Gold_PickUp_Radius", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeI Client_Only_Effect = new AttributeI(690, 0, 12, 1, 1, "", "", "Client Only Effect", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB Has_Doppelganger_Cloned = new AttributeB(691, 0, -1, 1, 1, "", "", "Has_Doppelganger_Cloned", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Resource_Gain_Bonus_Percent = new AttributeF(692, 0, 10, 0, 0, "", "", "Resource_Gain_Bonus_Percent", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI Looping_Animation_Start_Time = new AttributeI(693, 0, -1, 1, 1, "", "", "Looping_Animation_Start_Time", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeI Looping_Animation_End_Time = new AttributeI(694, 0, -1, 1, 1, "", "", "Looping_Animation_End_Time", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB Looping_Animation_Suppress_Item_Tooltips = new AttributeB(695, 0, -1, 1, 1, "", "", "Looping_Animation_Suppress_Item_Tooltips", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Heal_Effect_Last_Played_Tick = new AttributeI(696, -1, -1, 3, 1, "", "", "Heal_Effect_Last_Played_Tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Resource_Effect_Last_Played_tick = new AttributeI(697, -1, 10, 3, 1, "", "", "Resource_Effect_Last_Played_tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Thorns_Effect_Last_Played_tick = new AttributeI(698, -1, -1, 3, 1, "", "", "Thorns_Effect_Last_Played_tick", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI PVP_Kills = new AttributeI(699, 0, -1, 0, 1, "", "", "PVP_Kills", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Deaths = new AttributeI(700, 0, -1, 0, 1, "", "", "PVP_Deaths", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Assists = new AttributeI(701, 0, -1, 0, 1, "", "", "PVP_Assists", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Progression_Points_Gained = new AttributeI(702, 0, -1, 0, 1, "", "", "PVP_Progression_Points_Gained", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Current_Kill_Streak = new AttributeI(703, 0, -1, 0, 1, "", "", "PVP_Current_Kill_Streak", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Current_Death_Streak = new AttributeI(704, 0, -1, 0, 1, "", "", "PVP_Current_Death_Streak", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Longest_Kill_Streak = new AttributeI(705, 0, -1, 0, 1, "", "", "PVP_Longest_Kill_Streak", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI PVP_Longest_Death_Streak = new AttributeI(706, 0, -1, 0, 1, "", "", "PVP_Longest_Death_Streak", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeF Turn_Rate_Scalar = new AttributeF(707, 1065353216, -1, 5, 0, "", "", "Turn_Rate_Scalar", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Turn_Accel_Scalar = new AttributeF(708, 1065353216, -1, 5, 0, "", "", "Turn_Accel_Scalar", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeF Turn_Deccel_Scalar = new AttributeF(709, 1065353216, -1, 5, 0, "", "", "Turn_Deccel_Scalar", AttributeEncoding.Float16, 31, 0, 0, 16);
        public static readonly AttributeB No_Health_Drop = new AttributeB(710, 0, -1, 1, 1, "", "", "No_Health_Drop", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Leader = new AttributeB(711, 0, -1, 1, 1, "", "", "Leader", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB IsContentRestrictedActor = new AttributeB(712, 0, -1, 1, 1, "", "", "IsContentRestrictedActor", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB InBossEncounter = new AttributeB(713, 0, -1, 1, 1, "", "", "InBossEncounter", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeB God = new AttributeB(714, 0, -1, 1, 1, "", "", "God", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB MinimapActive = new AttributeB(715, 0, -1, 1, 1, "", "", "MinimapActive", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI MinimapIconOverride = new AttributeI(716, -1, -1, 0, 1, "", "", "MinimapIconOverride", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeB MinimapDisableArrow = new AttributeB(717, 0, -1, 1, 1, "", "", "MinimapDisableArrow", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeI Last_Blocked_ACD = new AttributeI(718, -1, -1, 3, 1, "", "", "Last_Blocked_ACD", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Last_Blocked_Time = new AttributeI(719, 0, -1, 1, 1, "", "", "Last_Blocked_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Deactivate_Lure = new AttributeB(720, 0, -1, 1, 1, "", "", "Deactivate Lure", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Weapons_Hidden = new AttributeB(721, 0, -1, 1, 1, "", "", "Weapons_Hidden", AttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly AttributeB Actor_Updates_Attributes_From_Owner = new AttributeB(722, 0, -1, 1, 1, "", "", "Actor_Updates_Attributes_From_Owner", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeI Taunt_Target_ACD = new AttributeI(723, -1, -1, 1, 1, "", "", "Taunt_Target_ACD", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeF UI_Only_Percent_Damage_Increase = new AttributeF(724, 0, -1, 0, 0, "", "", "UI_Only_Percent_Damage_Increase", AttributeEncoding.Float16, 1, 0, 0, 16);
        public static readonly AttributeI Projectile_Effect_SNO = new AttributeI(725, -1, -1, 3, 1, "", "", "Projectile_Effect_SNO", AttributeEncoding.Int, 31, 0, 0, 32);
        public static readonly AttributeF On_Hit_Fear_Proc_Chance = new AttributeF(726, 0, -1, 7, 0, "", "", "On_Hit_Fear_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Stun_Proc_Chance = new AttributeF(727, 0, -1, 7, 0, "", "", "On_Hit_Stun_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Blind_Proc_Chance = new AttributeF(728, 0, -1, 7, 0, "", "", "On_Hit_Blind_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Freeze_Proc_Chance = new AttributeF(729, 0, -1, 7, 0, "", "", "On_Hit_Freeze_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Chill_Proc_Chance = new AttributeF(730, 0, -1, 7, 0, "", "", "On_Hit_Chill_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Slow_Proc_Chance = new AttributeF(731, 0, -1, 7, 0, "", "", "On_Hit_Slow_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Immobilize_Proc_Chance = new AttributeF(732, 0, -1, 7, 0, "", "", "On_Hit_Immobilize_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Knockback_Proc_Chance = new AttributeF(733, 0, -1, 7, 0, "", "", "On_Hit_Knockback_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Bleed_Proc_Chance = new AttributeF(734, 0, -1, 7, 0, "", "", "On_Hit_Bleed_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF On_Hit_Bleed_Proc_Damage_Base = new AttributeF(735, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Base", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF On_Hit_Bleed_Proc_Damage_Delta = new AttributeF(736, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Damage_Percent_Reduction_From_Ranged = new AttributeF(737, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Ranged", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Percent_Reduction_From_Melee = new AttributeF(738, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Melee", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Damage_Percent_Reduction_Turns_Into_Heal = new AttributeF(739, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_Turns_Into_Heal", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Percent_Reduction_From_Elites = new AttributeF(740, 0, -1, 7, 0, "", "", "Damage_Percent_Reduction_From_Elites", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Percent_Reduction_From_Type = new AttributeF(741, 0, 0, 7, 0, "", "", "Damage_Percent_Reduction_From_Type", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Percent_Bonus_Vs_Monster_Type = new AttributeF(742, 0, 18, 7, 0, "", "", "Damage_Percent_Bonus_Vs_Monster_Type", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Damage_Percent_Bonus_Vs_Elites = new AttributeF(743, 0, -1, 7, 0, "", "", "Damage_Percent_Bonus_Vs_Elites", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeI Item_Manipulation_Timeout = new AttributeI(744, 0, -1, 4, 1, "", "", "Item_Manipulation_Timeout", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Picked_Up_Time = new AttributeI(745, 0, -1, 4, 1, "", "", "Picked_Up_Time", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeI Unequipped_Time = new AttributeI(746, 1, 19, 4, 1, "", "", "Unequipped Time", AttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly AttributeI Last_ACD_Killed_Time = new AttributeI(747, 0, -1, 4, 1, "", "", "Last_ACD_Killed_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB CannotDieDuring = new AttributeB(748, 0, -1, 1, 1, "", "", "CannotDieDuring", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeF Weapon_On_Hit_Fear_Proc_Chance = new AttributeF(749, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Stun_Proc_Chance = new AttributeF(750, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Blind_Proc_Chance = new AttributeF(751, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Freeze_Proc_Chance = new AttributeF(752, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Chill_Proc_Chance = new AttributeF(753, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Slow_Proc_Chance = new AttributeF(754, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Immobilize_Proc_Chance = new AttributeF(755, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Knockback_Proc_Chance = new AttributeF(756, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Chance = new AttributeF(757, 0, -1, 7, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base = new AttributeF(758, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta = new AttributeF(759, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Fear_Proc_Chance_MainHand = new AttributeF(760, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Fear_Proc_Chance )", "", "Weapon_On_Hit_Fear_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Fear_Proc_Chance_OffHand = new AttributeF(761, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Fear_Proc_Chance : 0)", "", "Weapon_On_Hit_Fear_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Fear_Proc_Chance_CurrentHand = new AttributeF(762, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Fear_Proc_Chance_OffHand : Weapon_On_Hit_Fear_Proc_Chance_MainHand)", "Weapon_On_Hit_Fear_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Stun_Proc_Chance_MainHand = new AttributeF(763, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Stun_Proc_Chance )", "", "Weapon_On_Hit_Stun_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Stun_Proc_Chance_OffHand = new AttributeF(764, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Stun_Proc_Chance : 0)", "", "Weapon_On_Hit_Stun_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Stun_Proc_Chance_CurrentHand = new AttributeF(765, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Stun_Proc_Chance_OffHand : Weapon_On_Hit_Stun_Proc_Chance_MainHand)", "Weapon_On_Hit_Stun_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Blind_Proc_Chance_MainHand = new AttributeF(766, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Blind_Proc_Chance )", "", "Weapon_On_Hit_Blind_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Blind_Proc_Chance_OffHand = new AttributeF(767, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Blind_Proc_Chance : 0)", "", "Weapon_On_Hit_Blind_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Blind_Proc_Chance_CurrentHand = new AttributeF(768, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Blind_Proc_Chance_OffHand : Weapon_On_Hit_Blind_Proc_Chance_MainHand)", "Weapon_On_Hit_Blind_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Freeze_Proc_Chance_MainHand = new AttributeF(769, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Freeze_Proc_Chance )", "", "Weapon_On_Hit_Freeze_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Freeze_Proc_Chance_OffHand = new AttributeF(770, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Freeze_Proc_Chance : 0)", "", "Weapon_On_Hit_Freeze_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand = new AttributeF(771, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Freeze_Proc_Chance_OffHand : Weapon_On_Hit_Freeze_Proc_Chance_MainHand)", "Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Chill_Proc_Chance_MainHand = new AttributeF(772, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Chill_Proc_Chance )", "", "Weapon_On_Hit_Chill_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Chill_Proc_Chance_OffHand = new AttributeF(773, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Chill_Proc_Chance : 0)", "", "Weapon_On_Hit_Chill_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Chill_Proc_Chance_CurrentHand = new AttributeF(774, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Chill_Proc_Chance_OffHand : Weapon_On_Hit_Chill_Proc_Chance_MainHand)", "Weapon_On_Hit_Chill_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Slow_Proc_Chance_MainHand = new AttributeF(775, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Slow_Proc_Chance )", "", "Weapon_On_Hit_Slow_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Slow_Proc_Chance_OffHand = new AttributeF(776, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Slow_Proc_Chance : 0)", "", "Weapon_On_Hit_Slow_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Slow_Proc_Chance_CurrentHand = new AttributeF(777, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Slow_Proc_Chance_OffHand : Weapon_On_Hit_Slow_Proc_Chance_MainHand)", "Weapon_On_Hit_Slow_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Immobilize_Proc_Chance_MainHand = new AttributeF(778, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Immobilize_Proc_Chance )", "", "Weapon_On_Hit_Immobilize_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Immobilize_Proc_Chance_OffHand = new AttributeF(779, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Immobilize_Proc_Chance : 0)", "", "Weapon_On_Hit_Immobilize_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand = new AttributeF(780, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Immobilize_Proc_Chance_OffHand : Weapon_On_Hit_Immobilize_Proc_Chance_MainHand)", "Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Knockback_Proc_Chance_MainHand = new AttributeF(781, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Knockback_Proc_Chance )", "", "Weapon_On_Hit_Knockback_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Knockback_Proc_Chance_OffHand = new AttributeF(782, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Knockback_Proc_Chance : 0)", "", "Weapon_On_Hit_Knockback_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand = new AttributeF(783, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Knockback_Proc_Chance_OffHand : Weapon_On_Hit_Knockback_Proc_Chance_MainHand)", "Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Chance_MainHand = new AttributeF(784, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Chance )", "", "Weapon_On_Hit_Bleed_Proc_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Chance_OffHand = new AttributeF(785, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Chance : 0)", "", "Weapon_On_Hit_Bleed_Proc_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand = new AttributeF(786, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Bleed_Proc_Chance_MainHand)", "Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand = new AttributeF(787, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Damage_Base )", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand = new AttributeF(788, 0, -1, 0, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Damage_Base : 0)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand = new AttributeF(789, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand)", "Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand = new AttributeF(790, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Weapon_On_Hit_Bleed_Proc_Damage_Delta )", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand = new AttributeF(791, 0, -1, 0, 0, "(Held_In_OffHand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta : 0)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand = new AttributeF(792, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand)", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand", AttributeEncoding.Float16Or32, 9, 0, 0, 0);
        public static readonly AttributeF Power_Damage_Percent_Bonus = new AttributeF(793, 0, 4, 0, 0, "", "", "Power_Damage_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Power_Resource_Reduction = new AttributeF(794, 0, 4, 0, 0, "", "", "Power_Resource_Reduction", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Power_Cooldown_Reduction = new AttributeF(795, 0, 4, 0, 0, "", "", "Power_Cooldown_Reduction", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Power_Duration_Increase = new AttributeF(796, 0, 4, 0, 0, "", "", "Power_Duration_Increase", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Power_Crit_Percent_Bonus = new AttributeF(797, 0, 4, 0, 0, "", "", "Power_Crit_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_Crit_Chance = new AttributeF(798, 0, -1, 7, 0, "", "", "Weapon_Crit_Chance", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_Crit_Chance_MainHand = new AttributeF(799, 0, -1, 7, 0, "(Held_In_OffHand ? 0 : Weapon_Crit_Chance )", "", "Weapon_Crit_Chance_MainHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_Crit_Chance_OffHand = new AttributeF(800, 0, -1, 7, 0, "(Held_In_OffHand ? Weapon_Crit_Chance : 0)", "", "Weapon_Crit_Chance_OffHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Weapon_Crit_Chance_CurrentHand = new AttributeF(801, 0, -1, 7, 0, "", "(DualWield_Hand ? Weapon_Crit_Chance_OffHand : Weapon_Crit_Chance_MainHand)", "Weapon_Crit_Chance_CurrentHand", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeF Strength_Item = new AttributeF(802, 0, -1, 0, 0, "", "", "Strength_Item", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Dexterity_Item = new AttributeF(803, 0, -1, 0, 0, "", "", "Dexterity_Item", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Intelligence_Item = new AttributeF(804, 0, -1, 0, 0, "", "", "Intelligence_Item", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeF Vitality_Item = new AttributeF(805, 0, -1, 0, 0, "", "", "Vitality_Item", AttributeEncoding.Float32, 9, 0, 0, 32);
        public static readonly AttributeI Item_Level_Requirement_Reduction = new AttributeI(806, 0, -1, 0, 1, "", "", "Item_Level_Requirement_Reduction", AttributeEncoding.Int, 9, 0, 0, 32);
        public static readonly AttributeF Item_Durability_Percent_Bonus = new AttributeF(807, 0, -1, 0, 0, "", "", "Item_Durability_Percent_Bonus", AttributeEncoding.Float16, 9, 0, 0, 16);
        public static readonly AttributeB Item_Indestructible = new AttributeB(808, 0, -1, 1, 1, "", "", "Item_Indestructible", AttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly AttributeF Core_Attributes_From_Item_Bonus_Multiplier = new AttributeF(809, 1065353216, -1, 1, 0, "", "", "Core_Attributes_From_Item_Bonus_Multiplier", AttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly AttributeB Waiting_To_Accept_Resurrection = new AttributeB(810, 0, -1, 1, 1, "", "", "Waiting_To_Accept_Resurrection", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeB Ghosted = new AttributeB(811, 0, -1, 1, 1, "", "", "Ghosted", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeB Special_Inventory_Has_Sold = new AttributeB(812, 0, -1, 1, 1, "", "", "Special_Inventory_Has_Sold", AttributeEncoding.IntMinMax, 2, 0, 1, 1);
        public static readonly AttributeI Power_Channel_Lockout_Time = new AttributeI(813, 0, -1, 4, 1, "", "", "Power_Channel_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_0_Lockout_Time = new AttributeI(814, 0, 4, 4, 1, "", "", "Power_Buff_0_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_1_Lockout_Time = new AttributeI(815, 0, 4, 4, 1, "", "", "Power_Buff_1_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_2_Lockout_Time = new AttributeI(816, 0, 4, 4, 1, "", "", "Power_Buff_2_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_3_Lockout_Time = new AttributeI(817, 0, 4, 4, 1, "", "", "Power_Buff_3_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_4_Lockout_Time = new AttributeI(818, 0, 4, 4, 1, "", "", "Power_Buff_4_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_5_Lockout_Time = new AttributeI(819, 0, 4, 4, 1, "", "", "Power_Buff_5_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_6_Lockout_Time = new AttributeI(820, 0, 4, 4, 1, "", "", "Power_Buff_6_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Power_Buff_7_Lockout_Time = new AttributeI(821, 0, 4, 4, 1, "", "", "Power_Buff_7_Lockout_Time", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeI Known_By_Owner = new AttributeI(822, -1, -1, 4, 1, "", "", "Known_By_Owner", AttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly AttributeB Never_Deactivates = new AttributeB(823, 0, -1, 1, 1, "", "", "Never_Deactivates", AttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly AttributeB Account_Under_Review = new AttributeB(824, 0, -1, 1, 1, "", "", "Account_Under_Review", AttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly AttributeI Projectile_Detonate_Time = new AttributeI(825, 0, -1, 4, 1, "", "", "Projectile_Detonate_Time", AttributeEncoding.Int, 64, 0, 0, 32);
    }
}
