#pragma once
#ifndef __OgreRecast_h_
#define __OgreRecast_h_

#include "OgreRecastDefinitions.h"
#include "OgreRecastConfigParams.h"
//#include "../DetourWrapper.h"
#include <string>
#include <vector>
#include "../Logg.h"
#include "../Vector3.h"

using namespace std;

/**
  * This class serves as a wrapper between Ogre and Recast/Detour
  * It's not a full wrapper, but instead offers the main features needed
  * to integrate the Ogre demo with Recast and Detour.
  **/
class OgreRecast
{
public:
    /**
      * Use static geometry for debug drawing the navmesh.
      * This is only useful when drawing tiled navmeshes (detourTileCache) and when there are
      * a lot of tiles, otherwise this will result in a too high batchcount.
      **/
    static bool STATIC_GEOM_DEBUG;

    /**
      * Set to true to print verbose messages about debug drawing.
      **/
    static bool VERBOSE;

    /**
      * Initialize an OgreRecast module to generate single navmeshes or store tiled navmeshes generated by OgreDetourTileCache.
      * You can specify custom parameters for navmesh building (which are also used by OgreDetourTileCache and some by DetourCrowd).
      * Not specifying parameters will result in defaults being used.
      **/
    OgreRecast(OgreRecastConfigParams configParams = OgreRecastConfigParams());


	~OgreRecast();
    /**
      * Should be called every frame. Used for updating navmesh debug drawing when using static geometry
      * (STATIC_GEOM_DEBUG).
      **/
    void update(void);

    /**
      * The agent radius for which this navmesh is built.
      **/
    float getAgentRadius(void);

    /**
      * The agent height for which this navmesh is built.
      **/
    float getAgentHeight(void);

    /**
      * The amount with which the drawn debug path is offset from the ground
      **/
    float getPathOffsetFromGround(void);

    /**
      * The amount with which the drawn debug navmesh polys are offset from the ground.
      **/
    float getNavmeshOffsetFromGround(void);

    /**
      * Size of each cell (the length of one dimension on the x-y plane) in world
      * units.
      **/
    float getCellSize(void) { return m_cellSize; }

    /**
      * Height in world units of one navmesh cell.
      **/
    float getCellHeight(void) { return m_cellHeight; }

   /**
     * Cleanup recast parameters and variables.
     * This does not clean up the objects related to debug drawing.
     **/
   void RecastCleanup();

   /**
     * Configure navbuild parameters for this module.
     * Sets m_cfg and other parameters.
     **/
   void configure(OgreRecastConfigParams params);


      /**
     * Convenience function for converting between Vector3
     * and float* used by recast.
    **/
   static void OgreVect3ToFloatA(const Vector3 vect, float* result);

   /**
     * Convenience function for converting between float* used by recast
     * and Vector3.
    **/
   static void FloatAToOgreVect3(const float* vect, Vector3 &result);

   /**
     * Build a navmesh from the specified input geometry.
     * @see{OgreRecast::NavMeshBuild(std::vector<Ogre::Entity*>)}
     **/
   //bool NavMeshBuild(InputGeom* input);

   /**
    * Find a path beween start point and end point and, if possible, generates a list of lines in a path.
    * It might fail if the start or end points aren't near any navmesh polygons, or if the path is too long,
    * or it can't make a path, or various other reasons.
    *
    * nPathSlot: The index number for the slot in which the found path is to be stored.
    * nTarget: Number identifying the target the path leads to. Recast does nothing with this, but you can give them
    *   meaning in your own application.
    *
    * Return codes:
    *  0   found path
    *  -1  Couldn't find polygon nearest to start point
    *  -2  Couldn't find polygon nearest to end point
    *  -3  Couldn't create a path
    *  -4  Couldn't find a path
    *  -5  Couldn't create a straight path
    *  -6  Couldn't find a straight path
   **/
   int FindPath(float* pStartPos, float* pEndPos, int nPathSlot, int nTarget);

   /**
     * Find a path between start and end position, works with Vector3 points.
     * @see{OgreRecast::FindPath(float*, float*, int, int)}
     **/
   //int FindPath(Vector3 startPos, Vector3 endPos, int nPathSlot, int nTarget);

   /**
     * Retrieve the path at specified slot defined as a line along an ordered set of 3D positions.
     * The path has a maximum length of MAX_PATHVERT, and is an empty list in case no path is
     * defined or an invalid pathSlot index is given.
     **/
   //std::vector<Vector3> getPath(int pathSlot);

   /**
     * The ID number identifying the target for the path at specified slot. Targets have
     * no meaning for OgreRecast but you can use them to give them their own meanings.
     * Returns 0 when a faulty pathSlot is given.
     **/
   int getTarget(int pathSlot);

   /**
     * Draw the nav mesh for debug purposes. The navmesh is converted to an Ogre::Mesh and
     * put inside the scene for rendering.
     **/
   void drawNavMesh(void);

   /**
     * Draw the nav mesh for debug purposes. The navmesh is converted to an Ogre::Mesh and
     * put inside the scene for rendering.
     **/
   void drawNavMesh2(void);

   /**
     * Calculate visual Ogre meshes to visualize the recast navigation mesh for debugging.
     *
     * Convert the calculated navmesh into an Ogre::ManualObject mesh, and put it in the scene.
     * A scenenode with name "RecastSN" will be created in the root of the scenegraph. This
     * scenenode is referenced by the m_pRecastSN member variable.
     *
     * Within this scenenode a mesh with name "RecastMOWalk" will be added, which is stored in
     * member variable m_pRecastMOWalk. This mesh will represents the faces of the segments in
     * the navmesh. Not the lines indicating the edges of the navmesh.
     *
     * The manual object referenced by member variable m_pRecastMONeighbour and with name
     * "RecastMONeighbour" is also added to the same scenenode. This object contains the lines
     * between neighbouring segments of the navmesh. These are all except the outer edges of
     * the navmesh.
     *
     * Finally, the manual object referenced by member variable m_pRecastMOBoundary and with name
     * "RecastMOBoundary" is added to the scene node. It is a collection of lines that represent
     * the outer edges of the navmesh, being the ones that do not have any neighbouring segments.
     **/
   
   void CreateRecastPolyMesh(int name, const unsigned short *verts, const int nverts,
                             const unsigned short *polys, const int npolys, const unsigned char *areas,
                             const int maxpolys, const unsigned short *regions, const int nvp,
                             const float cs, const float ch, const float *orig, bool colorRegions=true);

   /**
     * Remove debug drawn navmesh for navmesh tile with specified (compressed detourtile) reference.
     **/
   void removeDrawnNavmesh(unsigned int tileRef);

   /**
     * Create an Ogre::ManualObject mesh to visually debug a path on the navmesh found
     * using detour. The path stored in the specified slot number is visualized, and the
     * result is stored under the m_pRecastMOPath member variable and has the name "RecastMOPath".
     **/
   void CreateRecastPathLine(int nPathSlot);

   /**
     * Returns the poly filter that will be used for all (random) point and nearest poly searches,
     * as well as for pathfinding.
     **/
   dtQueryFilter getFilter(void);

   /**
     * Set the poly filter that will be used for all (random) point and nearest poly searches,
     * as well as for pathfinding.
     **/
   void setFilter(const dtQueryFilter filter);

   /**
     * Get the offset size (box) around points used to look for nav polygons.
     * This offset is used in all search for points on the navmesh.
     * The maximum offset that a specified point can be off from the navmesh.
     **/
   /**
     * Translate error code of detour findPath into a readable explanation.
     **/
   string getPathFindErrorMsg(int errorCode);

   /**
     * The configuration of the recast navmesh.
     **/
   rcConfig getConfig(void);

   //OgreRecastNavmeshPruner* getNavmeshPruner(void);


public:

   unsigned char* m_triareas;
   rcHeightfield* m_solid;
   rcCompactHeightfield* m_chf;
   rcContourSet* m_cset;
   rcPolyMesh* m_pmesh;
   rcConfig m_cfg;
   rcPolyMeshDetail* m_dmesh;

   vector<float> *verticesDrawListTiles;

   vector<float> *verticesDrawListTriangleNeighbour;

   vector<float> *verticesDrawListOutBorder;

   class InputGeom* m_geom;
   class dtNavMesh* m_navMesh;
   class dtNavMeshQuery* m_navQuery;
   unsigned char m_navMeshDrawFlags;

   rcContext* m_ctx;

   float m_cellSize;
   float m_cellHeight;
   float m_agentHeight;
   float m_agentRadius;
   float m_agentMaxClimb;
   float m_agentMaxSlope;
   float m_regionMinSize;
   float m_regionMergeSize;
   float m_edgeMaxLen;
   float m_edgeMaxError;
   int m_vertsPerPoly;
   float m_detailSampleDist;
   float m_detailSampleMaxError;
   bool m_keepInterResults ;

   // Off-Mesh connections.  Not used yet.
   static const int MAX_OFFMESH_CONNECTIONS = 256;
   float m_offMeshConVerts[MAX_OFFMESH_CONNECTIONS*3*2];
   float m_offMeshConRads[MAX_OFFMESH_CONNECTIONS];
   unsigned char m_offMeshConDirs[MAX_OFFMESH_CONNECTIONS];
   unsigned char m_offMeshConAreas[MAX_OFFMESH_CONNECTIONS];
   unsigned short m_offMeshConFlags[MAX_OFFMESH_CONNECTIONS];
   unsigned int m_offMeshConId[MAX_OFFMESH_CONNECTIONS];
   int m_offMeshConCount;


   // helper debug drawing stuff
   int m_nAreaCount ;
   bool m_rebuildSg;

   float m_flTestStart[3] ;
   float m_flTestEnd[3] ;

   float *m_normals;
   int m_flDataX;
   int m_flDataY;

   /**
     * Offset that the debug path is drawn from the ground.
     **/
   float m_pathOffsetFromGround;

   /**
     * Offset that the debug navmesh is drawn from the ground.
     **/
   float m_navMeshOffsetFromGround;

   /**
     * Offset that the navmesh edges are drawn from the ground.
     **/
   float m_navMeshEdgesOffsetFromGround;


   /**
    * Stores all created paths
   **/
   PATHDATA m_PathStore[MAX_PATHSLOT];

   /**
     * The poly filter that will be used for all (random) point and nearest poly searches.
     **/
   dtQueryFilter *mFilter;

   /**
     * The offset size (box) around points used to look for nav polygons.
     * This offset is used in all search for points on the navmesh.
     * The maximum offset that a specified point can be off from the navmesh.
     **/
   float mExtents[3];

   //OgreRecastNavmeshPruner *mNavmeshPruner;

private:

   // Friend OgreDetourTileCache so it can access the navmesh of this component
   //friend class OgreDetourTileCache;

   // Friend OgreDetourCrowd so it can access the navmesh of this component
   //friend class OgreDetourCrowd;
};

#endif // #ifndef __OgreRecast_h_
